from PySide6.QtWidgets import QStyledItemDelegate, QStyle, QStyleOptionViewItem
from PySide6.QtGui import QPainter, QColor, QPen, QBrush, QPolygon, QFont, QPainterPath
from PySide6.QtCore import Qt, QRect, QPoint
from schedule_model import ROLE_HAS_MEETING, ROLE_HAS_OVERTIME, ROLE_SPECIAL_SYMBOL, ROLE_LOCATION_SYMBOL, ROLE_ICON_COLOR
from debug_utils import log_error

class OvertimeItemDelegate(QStyledItemDelegate):
    """
    Delegat dla komórek tabeli grafiku. WERSJA FINALNA:
    Używa sprawdzonej logiki dostarczonej przez użytkownika do rysowania tła.
    """

    def __init__(self, settings=None, parent=None):
        super().__init__(parent)
        self.settings = settings or {}

    def paint(self, painter: QPainter, option: QStyleOptionViewItem, index):
        try:
            painter.save()

            # Krok 1: Utwórz zaokrągloną ścieżkę, która będzie naszą "maską" do rysowania.
            clip_path = QPainterPath()
            # Używamy promienia 4px dla wyraźniejszego zaokrąglenia.
            clip_path.addRoundedRect(option.rect, 4.0, 4.0)
            painter.setClipPath(clip_path)

            # Krok 2: Pozwól domyślnej implementacji narysować tło (z kolorem) i tekst.
            # Wszystko, co narysuje, zostanie automatycznie przycięte do naszej zaokrąglonej maski.
            super().paint(painter, option, index)

            # Krok 3: Zdejmij "maskę", aby móc swobodnie rysować ikony na wierzchu.
            painter.restore()

            # Krok 4: Narysuj nasze niestandardowe ikony (ta logika pozostaje bez zmian).
            special_symbol = index.data(ROLE_SPECIAL_SYMBOL)
            location_symbol = index.data(ROLE_LOCATION_SYMBOL)
            has_meeting = index.data(ROLE_HAS_MEETING)
            has_overtime = index.data(ROLE_HAS_OVERTIME)

            painter.save()
            painter.setRenderHint(QPainter.Antialiasing)

            if has_meeting:
                marker_size = 7
                rect = QRect(option.rect.left() + 2, option.rect.bottom() - marker_size - 1, marker_size, marker_size)
                painter.setBrush(QBrush(QColor(255, 255, 255, 240)))
                painter.setPen(QPen(QColor(0, 0, 0, 220), 1.0))
                painter.drawEllipse(rect)

            if has_overtime:
                marker_size = 7
                x = option.rect.right() - marker_size - 1
                y = option.rect.bottom() - marker_size - 1
                triangle = QPolygon(
                    [QPoint(x, y + marker_size), QPoint(x + marker_size, y + marker_size), QPoint(x + marker_size, y)])
                painter.setBrush(QBrush(QColor(220, 0, 0, 220)))
                painter.setPen(QPen(Qt.black, 1.0))
                painter.drawPolygon(triangle)

            # Usunięto odwołanie do `self.settings`, ponieważ te dane są teraz bezpośrednio w modelu
            if special_symbol:
                self._draw_text_with_background(painter, option, special_symbol, 'top_left')

            if location_symbol:
                self._draw_text_with_background(painter, option, location_symbol, 'top_right')

            painter.restore()
        except Exception as e:
            log_error(f"Błąd podczas rysowania delegata: {e}")
            
    def _draw_text_with_background(self, painter: QPainter, option: QStyleOptionViewItem, text: str, position: str):
        """
        Rysuje tekst z tłem, używając sprawdzonej logiki ręcznego dopasowania rozmiaru.
        """
        # Użycie kopii czcionki, aby uniknąć konfliktów przy rysowaniu wielu ikon
        icon_font = QFont(option.font)

        # Słownik do dynamicznej zmiany rozmiaru czcionki ikony
        font_size_map = {
            7: 6, 8: 6, 9: 7, 10: 8, 11: 9, 12: 10
        }
        main_font_size = option.font.pointSize()
        icon_font_size = font_size_map.get(main_font_size, 7)

        icon_font.setPointSize(icon_font_size)

        # Przywrócenie pogrubienia, które było w działającej wersji
        icon_font.setBold(False)
        painter.setFont(icon_font)

        metrics = painter.fontMetrics()

        text_width = metrics.horizontalAdvance(text)
        text_height = metrics.ascent() + metrics.descent()

        # --- PRZYWRÓCONA, DZIAŁAJĄCA LOGIKA TWORZENIA TŁA ---
        bg_rect = QRect(0, 0, text_width, text_height)

        # Ręczne "ściskanie" tła w pionie, aby usunąć margines górny i dolny.
        vertical_squeeze = 1
        bg_rect.adjust(0, vertical_squeeze, 0, -vertical_squeeze)

        # Dodanie minimalnego marginesu po bokach dla estetyki.
        horizontal_margin = 1
        bg_rect.adjust(-horizontal_margin, 0, horizontal_margin, 0)

        # Pozycjonowanie z odsunięciem, które było w działającej wersji
        if position == 'top_left':
            bg_rect.moveTo(option.rect.topLeft() + QPoint(1, 1))
        elif position == 'top_right':
            bg_rect.moveTo(option.rect.topRight() - QPoint(bg_rect.width() - 1, -1))

        # Rysowanie tła i tekstu
        painter.setBrush(QColor(Qt.white))
        painter.setPen(Qt.NoPen)

        painter.drawRoundedRect(bg_rect, 3, 3)

        painter.setPen(QColor(Qt.black))
        painter.drawText(bg_rect, Qt.AlignCenter, text)
