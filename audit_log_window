# audit_log_window.py

from PySide6.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QTableView,
                               QHeaderView, QPushButton, QSpacerItem, QSizePolicy)
from PySide6.QtCore import Qt, QAbstractTableModel, QModelIndex, Signal
from PySide6.QtGui import QColor, QBrush
from styles import AppStyles
import datetime

class AuditLogTableModel(QAbstractTableModel):
    """Model danych dla tabeli z historią zmian."""
    def __init__(self, data=None, parent=None):
        super().__init__(parent)
        self._data = data or []
        self._headers = ["Data Zmiany", "Pracownik", "Symbol po zmianie", "Typ modyfikacji", "Zmodyfikowano o", "Zmodyfikował"]

    def rowCount(self, parent=QModelIndex()):
        return len(self._data)

    def columnCount(self, parent=QModelIndex()):
        return len(self._headers)

    def headerData(self, section, orientation, role=Qt.DisplayRole):
        if role == Qt.DisplayRole and orientation == Qt.Horizontal:
            return self._headers[section]
        return None

    def data(self, index, role=Qt.DisplayRole):
        if not index.isValid():
            return None

        row_data = self._data[index.row()]
        col = index.column()

        if role == Qt.DisplayRole:
            if col == 0:
                val = row_data.get('Data')
                return val.strftime('%Y-%m-%d') if isinstance(val, datetime.date) else ''
            elif col == 1: return str(row_data.get('Uzytkownik', ''))
            elif col == 2: return row_data.get('Symbol', '')
            elif col == 3: return row_data.get('TypModyfikacji', '')
            elif col == 4:
                val = row_data.get('DataModyfikacji')
                return val.strftime('%Y-%m-%d %H:%M:%S') if isinstance(val, datetime.datetime) else ''
            elif col == 5: return row_data.get('Modyfikujacy', '')

        if role == Qt.ForegroundRole and col == 3:  # Kolorowanie typu modyfikacji
            op_type = row_data.get('TypModyfikacji', '')
            if op_type == 'Wstawienie symbolu':
                return QBrush(QColor("lightgreen"))
            elif op_type == 'Usunięcie symbolu':
                return QBrush(QColor("red"))
            elif op_type == 'UPDATE':
                return QBrush(QColor("orange"))

        return None

    def update_data(self, new_data):
        """Metoda do aktualizacji danych w modelu."""
        self.beginResetModel()
        self._data = new_data
        self.endResetModel()

class AuditLogWindow(QDialog):
    """Nowe okno do wyświetlania historii zmian w grafiku."""

    # Sygnał emitowany, gdy użytkownik kliknie "Odśwież"
    refresh_requested = Signal()

    def __init__(self, audit_data, is_dark_theme, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Historia Zmian Grafiku")
        self.setMinimumSize(600, 400)

        main_layout = QVBoxLayout(self)
        self.audit_table_view = QTableView()
        main_layout.addWidget(self.audit_table_view)

        # Dodanie przycisków na dole okna
        button_layout = QHBoxLayout()
        button_layout.addSpacerItem(QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum))

        self.refresh_button = QPushButton("Odśwież")
        self.refresh_button.clicked.connect(self.refresh_requested.emit)

        self.close_button = QPushButton("Zamknij")
        self.close_button.clicked.connect(self.accept)

        button_layout.addWidget(self.refresh_button)
        button_layout.addWidget(self.close_button)
        main_layout.addLayout(button_layout)

        # Konfiguracja modelu i widoku
        self.model = AuditLogTableModel(audit_data)
        self.audit_table_view.setModel(self.model)

        # Ustawianie stylu i rozmiarów
        theme = "dark" if is_dark_theme else "light"
        self.setStyleSheet(AppStyles.get_dialog_style(theme))
        self.audit_table_view.setStyleSheet(AppStyles.get_table_style(theme))
        self.refresh_button.setStyleSheet(AppStyles.get_button_style(theme))
        self.close_button.setStyleSheet(AppStyles.get_button_style(theme))

        self.audit_table_view.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeToContents)
        self.audit_table_view.horizontalHeader().setStretchLastSection(True)
        self.audit_table_view.setSortingEnabled(True)
        self.audit_table_view.sortByColumn(4, Qt.DescendingOrder)

    def update_model_data(self, new_data):
        """Publiczna metoda do aktualizacji danych w tabeli."""
        self.model.update_data(new_data)
