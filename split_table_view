from PySide6.QtWidgets import (QWidget, QTableView, QVBoxLayout, QHBoxLayout,
                               QSplitter, QHeaderView, QAbstractItemView, QScrollBar, QSizePolicy,
                               QTableWidgetSelectionRange)
from PySide6.QtCore import Qt, Signal, QItemSelectionModel, QEvent, QModelIndex, QItemSelection, QTimer
from debug_utils import debug_print, log_warning, log_error
from styles import AppStyles


class SplitTableView(QWidget):
    """
    Widget zawierający dwa zsynchronizowane widoki tabeli - tabelę pracowników i tabelę grafiku.
    """
    selection_changed = Signal()

    def __init__(self, parent=None):
        super().__init__(parent)

        self.main_layout = QVBoxLayout(self)
        self.main_layout.setContentsMargins(0, 0, 0, 0)
        self.main_layout.setSpacing(0)

        self.splitter = QSplitter(Qt.Horizontal)

        # --- ZMIANA: Powrót do standardowych nagłówków QHeaderView ---
        self.employees_view = QTableView()
        self.schedule_view = QTableView()
        # --- KONIEC ZMIANY ---

        self.employees_view.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.employees_view.setSelectionMode(QAbstractItemView.ExtendedSelection)
        self.employees_view.verticalHeader().setVisible(True)
        self.employees_view.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)

        self.employees_view.verticalHeader().setDefaultSectionSize(25)
        self.employees_view.verticalHeader().setMinimumSectionSize(25)
        self.employees_view.verticalHeader().setSectionResizeMode(QHeaderView.Fixed)

        self.employees_view.horizontalHeader().setFixedHeight(35)
        self.employees_view.horizontalHeader().setSectionResizeMode(QHeaderView.Interactive)
        self.employees_view.horizontalHeader().setSectionsClickable(True)

        self.schedule_view.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.schedule_view.setSelectionBehavior(QAbstractItemView.SelectItems)
        self.schedule_view.setSelectionMode(QAbstractItemView.ExtendedSelection)
        self.schedule_view.verticalHeader().setVisible(False)
        self.schedule_view.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)

        self.schedule_view.verticalHeader().setDefaultSectionSize(25)
        self.schedule_view.verticalHeader().setMinimumSectionSize(25)
        self.schedule_view.verticalHeader().setSectionResizeMode(QHeaderView.Fixed)

        self.schedule_view.horizontalHeader().setFixedHeight(35)
        self.schedule_view.setSortingEnabled(False)
        self.schedule_view.horizontalHeader().setSectionsClickable(False)

        self.employees_view.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
        self.employees_view.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.schedule_view.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOn)

        self.splitter.addWidget(self.employees_view)
        self.splitter.addWidget(self.schedule_view)
        self.main_layout.addWidget(self.splitter)

        self.splitter.setStretchFactor(0, 0)
        self.splitter.setStretchFactor(1, 1)

        self._is_updating = False
        self._model = None
        self._sync_timer = QTimer()
        self._sync_timer.setSingleShot(True)
        self._sync_timer.timeout.connect(self._delayed_sync_heights)

        self._setup_simple_scrollbar_hiding()
        self.schedule_view.horizontalHeader().setContextMenuPolicy(Qt.CustomContextMenu)

    def set_header_height(self, height):
        self.employees_view.horizontalHeader().setFixedHeight(height)
        self.schedule_view.horizontalHeader().setFixedHeight(height)

    def set_schedule_columns_width(self):
        if not self._model:
            return
        total_columns = self.schedule_view.model().columnCount()
        for col in range(total_columns - 1):
            self.schedule_view.setColumnWidth(col, 60)
        self.schedule_view.setColumnWidth(total_columns - 1, 70)

    def rowCount(self):
        return self.employees_view.model().rowCount() if self.employees_view.model() else 0

    def columnCount(self):
        if not self.employees_view.model():
            return 0
        return self.employees_view.model().columnCount() + self.schedule_view.model().columnCount()

    def _connect_signals(self):
        self._sync_vertical_scrollbars()
        if self.employees_view.model() and self.schedule_view.model():
            self._sync_row_selection()
        self._force_sync_heights()

    def _setup_simple_scrollbar_hiding(self):
        self.employees_view.verticalScrollBar().setStyleSheet("QScrollBar:vertical { width: 0px; }")
        h_scrollbar = self.employees_view.horizontalScrollBar()
        if h_scrollbar:
            h_scrollbar.setStyleSheet("""
                QScrollBar:horizontal {
                    height: 17px;
                    background: transparent;
                    border: none;
                }
                QScrollBar::handle:horizontal,
                QScrollBar::add-line:horizontal,
                QScrollBar::sub-line:horizontal,
                QScrollBar::add-page:horizontal,
                QScrollBar::sub-page:horizontal {
                    background: transparent;
                    border: none;
                }
            """)
            h_scrollbar.setRange(0, 0)

    def _sync_vertical_scrollbars(self):
        employees_vbar = self.employees_view.verticalScrollBar()
        schedule_vbar = self.schedule_view.verticalScrollBar()

        def sync_employees_to_schedule():
            if not self._is_updating:
                self._is_updating = True
                schedule_vbar.setValue(employees_vbar.value())
                self._is_updating = False

        def sync_schedule_to_employees():
            if not self._is_updating:
                self._is_updating = True
                employees_vbar.setValue(schedule_vbar.value())
                self._is_updating = False

        employees_vbar.valueChanged.connect(sync_employees_to_schedule)
        schedule_vbar.valueChanged.connect(sync_schedule_to_employees)
        self._sync_horizontal_scrollbar_visibility()

    def _sync_row_selection(self):
        if not self.employees_view.selectionModel() or not self.schedule_view.selectionModel():
            return
        self.employees_view.selectionModel().selectionChanged.connect(self._on_employees_selection_changed)
        self.schedule_view.selectionModel().selectionChanged.connect(self._on_schedule_selection_changed)

    def _on_employees_selection_changed(self, selected, deselected):
        if not self._is_updating:
            self._is_updating = True
            try:
                selection = self.employees_view.selectionModel().selection()
                self.schedule_view.selectionModel().clearSelection()
                for index_range in selection:
                    for row in range(index_range.top(), index_range.bottom() + 1):
                        left = self.schedule_view.model().index(row, 0)
                        right = self.schedule_view.model().index(row, self.schedule_view.model().columnCount() - 1)
                        row_selection = QItemSelectionModel.Select | QItemSelectionModel.Rows
                        self.schedule_view.selectionModel().select(QItemSelection(left, right), row_selection)
                self.selection_changed.emit()
            finally:
                self._is_updating = False

    def _on_schedule_selection_changed(self, selected, deselected):
        if not self._is_updating:
            self._is_updating = True
            try:
                rows = set(index.row() for index in self.schedule_view.selectionModel().selectedIndexes())
                self.employees_view.selectionModel().clearSelection()
                for row in rows:
                    left = self.employees_view.model().index(row, 0)
                    right = self.employees_view.model().index(row, self.employees_view.model().columnCount() - 1)
                    row_selection = QItemSelectionModel.Select | QItemSelectionModel.Rows
                    self.employees_view.selectionModel().select(QItemSelection(left, right), row_selection)
                self.selection_changed.emit()
            finally:
                self._is_updating = False

    def _on_scrollbar_range_changed(self, min_val, max_val):
        self._sync_timer.start(50)

    def _force_sync_heights(self, row_height=25):
        if not self.employees_view.model():
            return
        row_count = self.employees_view.model().rowCount()
        for row in range(row_count):
            self.employees_view.setRowHeight(row, row_height)
            self.schedule_view.setRowHeight(row, row_height)

    def _delayed_sync_heights(self):
        self._force_sync_heights()

    def set_model(self, model):
        self._model = model
        if model:
            visible_columns = model.get_visible_columns()
            employee_columns_count = len(visible_columns)
            self.employees_view.setModel(model)
            self.schedule_view.setModel(model)
            if hasattr(self.parent(), 'is_dark_theme'):
                theme = "dark" if self.parent().is_dark_theme else "light"
                self.employees_view.setStyleSheet(AppStyles.get_table_style(theme))
                self.schedule_view.setStyleSheet(AppStyles.get_table_style(theme))
            for col in range(model.columnCount()):
                if col < employee_columns_count:
                    self.employees_view.showColumn(col)
                    self.schedule_view.hideColumn(col)
                else:
                    self.employees_view.hideColumn(col)
                    self.schedule_view.showColumn(col)
            self._set_column_widths()
            self.employees_view.setSortingEnabled(True)
            self._force_sync_heights()
            self._connect_signals()

    def adjust_employees_table_width(self):
        if not self._model: return
        target_width = 0
        visible_cols = self._model.get_visible_columns()
        for col_idx in range(len(visible_cols)):
            if not self.employees_view.isColumnHidden(col_idx):
                target_width += self.employees_view.columnWidth(col_idx)
        target_width += 40
        total_splitter_width = self.splitter.width()
        right_panel_width = total_splitter_width - target_width
        self.splitter.setSizes([target_width, right_panel_width])

    def setRowCount(self, count):
        if hasattr(self, 'employees_view') and self.employees_view.model() and hasattr(self._model, 'setRowCount'):
            self._model.setRowCount(count)

    def selectedRanges(self):
        if hasattr(self, 'schedule_view') and self.schedule_view:
            selection_model = self.schedule_view.selectionModel()
            if selection_model:
                selected_indexes = selection_model.selectedIndexes()
                if selected_indexes:
                    row_groups = {}
                    for index in selected_indexes:
                        row = index.row()
                        if row not in row_groups: row_groups[row] = []
                        row_groups[row].append(index.column())
                    ranges = []
                    for row, columns in row_groups.items():
                        if columns:
                            min_col, max_col = min(columns), max(columns)
                            ranges.append(QTableWidgetSelectionRange(row, min_col, row, max_col))
                    return ranges
        return []

    def _set_column_widths(self):
        if not self._model: return
        visible_columns = self._model.get_visible_columns()
        all_columns = self._model._employee_columns
        column_info = {col_id: (name, width) for col_id, name, width in all_columns}
        for col_idx, col_id in enumerate(visible_columns):
            width = column_info.get(col_id, (None, 100))[1]
            self.employees_view.setColumnWidth(col_idx, width)
        days_in_month = self._model._days_in_month if hasattr(self._model, '_days_in_month') else 31
        for day in range(1, days_in_month + 2):
            self.schedule_view.setColumnWidth(day - 1, 65)
        if days_in_month > 0:
            self.schedule_view.setColumnWidth(days_in_month, 50)
            self.schedule_view.setColumnWidth(days_in_month + 1, 50)

    def get_selected_rows(self):
        return sorted(set(index.row() for index in self.employees_view.selectionModel().selectedIndexes()))

    def get_selected_cells(self):
        return [(index.row(), index.column()) for index in self.schedule_view.selectionModel().selectedIndexes()]

    def get_data_for_selected_cells(self):
        if not self._model: return []
        indexes = self.schedule_view.selectionModel().selectedIndexes()
        cells_data = []
        for index in indexes:
            data = self._model.data(index, Qt.UserRole)
            if data and isinstance(data, dict) and 'date_str' in data and 'uzytkownik_id' in data:
                cells_data.append(data)
        return cells_data

    def clear(self):
        if self.employees_view.selectionModel(): self.employees_view.selectionModel().clearSelection()
        if self.schedule_view.selectionModel(): self.schedule_view.selectionModel().clearSelection()

    def set_data_at(self, row, col, value):
        if not self._model: return False
        index = self._model.index(row, col)
        return self._model.setData(index, value, Qt.EditRole) if index.isValid() else False

    def get_global_column_index(self, table, column):
        if not self._model: return -1
        if table == 'employees': return column
        if table == 'schedule': return column + len(self._model.get_visible_columns())
        return -1

    def update_cell_icon(self, row, day, has_meeting=False, has_training=False, has_overtime=False):
        if not self._model: return
        col = len(self._model.get_visible_columns()) + day - 1
        index = self._model.index(row, col)
        cell_data = self._model.data(index, Qt.UserRole)
        if not isinstance(cell_data, dict): return
        updated_data = cell_data.copy()
        updated_data.update({'has_meeting': has_meeting, 'has_training': has_training, 'has_overtime': has_overtime})
        if hasattr(self._model, 'update_cell_data'):
            self._model.update_cell_data(index, updated_data)
        self.schedule_view.update(index)

    def _sync_horizontal_scrollbar_visibility(self):
        employees_hbar = self.employees_view.horizontalScrollBar()
        schedule_hbar = self.schedule_view.horizontalScrollBar()
        def sync_visibility():
            if schedule_hbar and employees_hbar:
                employees_hbar.setVisible(schedule_hbar.isVisible())
        if schedule_hbar:
            schedule_hbar.rangeChanged.connect(lambda: QTimer.singleShot(10, sync_visibility))
        sync_visibility()

    def get_column_widths(self) -> dict:
        """Zwraca słownik z aktualnymi szerokościami widocznych kolumn pracowników."""
        if not self._model:
            return {}

        widths = {}
        visible_columns_ids = self._model.get_visible_columns()
        for i, col_id in enumerate(visible_columns_ids):
            widths[col_id] = self.employees_view.columnWidth(i)

        return widths
