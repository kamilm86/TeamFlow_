# Plik: business_rules.py

class BusinessRules:
    """
    Centralne miejsce do przechowywania reguł biznesowych aplikacji,
    w tym definicji uprawnień dla poszczególnych ról.
    """
    # Definicja uprawnień. Klucz to nazwa funkcji/elementu, wartość to zbiór ról z dostępem.
    PERMISSIONS = {
        # Edycja z klawiatury (godziny, symbole)
        'schedule_keyboard_edit': {'Pracownik WPR', 'Lider OUT'},
        # Wstawianie zmian i absencji przez przyciski
        'schedule_cell_actions': {'Pracownik WPR', 'Lider OUT'},
        # Dostęp do przycisku 'Dodaj nadgodziny'
        'button_add_overtime': {'Pracownik WPR'},
        # Dostęp do przycisku 'Obsada' (Staffing Details)
        'button_staffing_details': {'Pracownik WPR'},
        # Dostęp do przycisku 'Historia Zmian'
        'button_show_audit': {'Pracownik WPR'},
        # Dostęp do przycisku 'Zarządzaj Grafikiem' (dla przyszłego miesiąca)
        'button_schedule_control': {'Pracownik WPR', 'Lider OUT'},
        # Możliwość usuwania symboli (klawisz Delete)
        'action_delete_symbol': {'Pracownik WPR','Lider OUT'},
        # ZMIANA: Dodano nowe uprawnienie do zarządzania widocznością kolumny komentarza
        'view_schedule_comment_column': {'Pracownik WPR'},
    }

    @classmethod
    def has_permission(cls, role: str, feature_key: str) -> bool:
        """
        Sprawdza, czy dana rola ma uprawnienia do określonej funkcji.

        Args:
            role (str): Rola użytkownika (np. "Pracownik WPR").
            feature_key (str): Klucz identyfikujący funkcję (np. "button_add_overtime").

        Returns:
            bool: True, jeśli użytkownik ma uprawnienia, w przeciwnym razie False.
        """
        if not role or not feature_key:
            return False

        # Pobierz zbiór ról dla danej funkcji
        allowed_roles = cls.PERMISSIONS.get(feature_key)

        # Jeśli funkcja nie jest zdefiniowana w uprawnieniach, domyślnie odmawiaj dostępu
        if allowed_roles is None:
            return False

        # Sprawdź, czy rola użytkownika znajduje się w zbiorze uprawnionych ról
        return role in allowed_roles

    # Zbiór symboli, które są traktowane jako absencje
    ABSENCE_SYMBOLS = {
        'U', 'UZ', 'UOP', 'CO', 'CR', 'UB', 'UM', 'UO', 'UOD', 'US', 'UT', 'UW',
        'CRW', 'CSR', 'ZO', 'ZS', 'NN', 'NU', 'NW', 'O', 'OS', 'USW', 'Z'
    }

    # Mapowanie nazw grup na zbiory wydziałów
    GROUP_MAPPING = {
        "TOTAL VOICE": {'WNT', 'WZK1v', 'WZK2v', 'WZK3v', 'WZK3w', 'WZFv'},
        "MASS+WELCAMER+GOLD": {'WZKv', 'WZK3w', 'WNT', 'WZK1v', 'WZK2v', 'WZK3v'},
        "NUMEN+FIRMA": {'WZFv', 'WZFc'},
        "CZAT": {'WZFv', 'WZK3v', 'WZK3w', 'WZK1c', 'WZK2c', 'WZK3c', 'WZFc', 'OBDc'},
        "WELCOMER": {'WZK3v', 'WZK3c', 'WZK3w'},
        "GOLD": {'WZK2v', 'WZK2c'},
        "NUMEN+FIRMA_VOICE": {'WZFv'},
        "WELCOMER VOICE": {'WZK3v', 'WZK3w'}
    }
