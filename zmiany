# W pliku main.py, wewnƒÖtrz klasy WorkScheduleWindow

def update_buttons_visibility(self):
    """Aktualizuje widoczno≈õƒá przycisk√≥w na podstawie roli u≈ºytkownika"""
    is_next_month_selected = False
    current_data = self.date_combo.currentData()
    if current_data:
        selected_year, selected_month = current_data
        today = QDate.currentDate()
        next_month_date = today.addMonths(1)
        if selected_year == next_month_date.year() and selected_month == next_month_date.month():
            is_next_month_selected = True

    if hasattr(self, 'add_overtime_button'):
        self.add_overtime_button.setVisible(app_settings.has_permission(self.current_user_role, 'button_add_overtime'))
    if hasattr(self, 'staffing_details_button'):
        self.staffing_details_button.setVisible(app_settings.has_permission(self.current_user_role, 'button_staffing_details'))
    if hasattr(self, 'show_audit_button'):
        self.show_audit_button.setVisible(app_settings.has_permission(self.current_user_role, 'button_show_audit'))
    if hasattr(self, 'schedule_control_button'):
        can_see_button = app_settings.has_permission(self.current_user_role, 'button_schedule_control')
        self.schedule_control_button.setVisible(can_see_button and is_next_month_selected)
    
    # --- POCZƒÑTEK NOWEJ LOGIKI ---
    # Ukryj przycisk wyjƒÖtk√≥w lokalizacyjnych dla roli Lider OUT
    if hasattr(self, 'location_exception_button'):
        self.location_exception_button.setVisible(self.current_user_role != 'Lider OUT')
    # --- KONIEC NOWEJ LOGIKI ---

# W pliku schedule_edit_dialogs.py, wewnƒÖtrz klasy ScheduleChangeDialog

def _apply_change_for_row(self, visual_row_index):
    """Stosuje zmianƒô dla konkretnego wiersza, z inteligentnym pytaniem o pow√≥d zmiany."""
    button = self.cells_table.cellWidget(visual_row_index, 7)
    if not button or not button.isEnabled(): return

    status_item = self.cells_table.item(visual_row_index, 8)
    
    try:
        item = self.cells_table.item(visual_row_index, 0)
        if not item: raise ValueError("Nie mo≈ºna odnale≈∫ƒá elementu w wierszu.")
        original_data_index = item.data(Qt.UserRole)
        cell_data = self.flattened_cells[original_data_index]

        # Inicjalizacja danych
        user_id = cell_data.get('uzytkownik_id')
        nr_kadrowy = cell_data.get('nr_kadrowy')
        user_name = cell_data.get('uzytkownik_dane')
        date_str = cell_data.get('date_str')
        q_date = QDate.fromString(date_str, "yyyy-MM-dd")
        _, modyfikujacy_id, _, _, _ = get_modifier_id()
        location_map = {'h': 1, 's': 3, 'p': 2}
        default_location_code = cell_data.get('lokalizacja_domyslna', 'h')
        target_dept = cell_data.get('wydzial', '').upper()

        location_combo = self.cells_table.cellWidget(visual_row_index, 4)
        time_button = self.cells_table.cellWidget(visual_row_index, 5)
        hours_button = self.cells_table.cellWidget(visual_row_index, 6)
        
        from symbol_parser import parse_symbol, build_symbol
        original_parsed_symbol = parse_symbol(cell_data.get('symbol', ''))
        
        new_location_code = location_combo.currentData()
        new_start_hour = int(time_button.text())
        new_work_hours = int(hours_button.text())
        
        original_location_code = original_parsed_symbol.get('location') or default_location_code
        loc_changed = new_location_code != original_location_code
        is_reverting_to_default = loc_changed and (new_location_code == default_location_code)
        
        reason_for_change = None 
        
        if loc_changed:
            if is_reverting_to_default:
                # Regu≈Ça 3: Przywracanie domy≈õlnej - nie pytaj o pow√≥d, bƒôdzie NULL
                reason_for_change = None
            elif target_dept.startswith('WZP'):
                # Regu≈Ça 1: Wydzia≈Çy WZP - automatyczny pow√≥d
                reason_for_change = "Zmiana w aplikacji"
            else:
                # Regu≈Ça 2: Pozosta≈Çe wydzia≈Çy - pytaj o pow√≥d (z pamiƒôciƒÖ podrƒôcznƒÖ)
                if user_id in self.reason_cache:
                    reason_for_change = self.reason_cache[user_id]
                else:
                    reason_dialog = ReasonDialog(self)
                    if reason_dialog.exec() == QDialog.Accepted:
                        reason_for_change = reason_dialog.getReason()
                        self.reason_cache[user_id] = reason_for_change
                    else:
                        status_item.setText("Anulowano")
                        status_item.setForeground(QColor("gray"))
                        return

        button.setEnabled(False); button.setText("Przetwarzanie..."); QApplication.processEvents()

        # ... (reszta kodu metody, a≈º do jej ko≈Ñca, pozostaje bez zmian)
        result = {}
        new_symbol = build_symbol(location=new_location_code, start_hour=new_start_hour, work_hours=new_work_hours, special_symbol=original_parsed_symbol.get('special_symbol'))
        if loc_changed:
            exact_exception, range_exception = self.parent_widget._check_location_exception(user_id, q_date)
            new_location_id = location_map.get(new_location_code, 1)
            if is_reverting_to_default:
                if range_exception: result = {"success": False, "message": "Ten dzie≈Ñ jest czƒô≈õciƒÖ wielodniowego wyjƒÖtku. Zaktualizuj go rƒôcznie."}
                else:
                    result = self.parent_widget._call_import_changes_procedure(nr_kadrowy, self.year, self.month, date_str, new_symbol)
                    if result.get("success") and exact_exception:
                        params = (None, modyfikujacy_id, None, None, None, reason_for_change, 3, exact_exception['Id'])
                        self.parent_widget._manage_location_exception(params)
            else: 
                if exact_exception:
                    if exact_exception['Lokalizacja'] == new_location_id: result = self.parent_widget._call_import_changes_procedure_3(nr_kadrowy, self.year, self.month, date_str, new_symbol)
                    else:
                        result = self.parent_widget._call_import_changes_procedure(nr_kadrowy, self.year, self.month, date_str, new_symbol)
                        if result.get("success"):
                            params = (user_id, modyfikujacy_id, date_str, date_str, new_location_id, reason_for_change, 2, exact_exception['Id'])
                            self.parent_widget._manage_location_exception(params)
                elif range_exception:
                    if range_exception['Lokalizacja'] != new_location_id: result = {"success": False, "message": "Istnieje wyjƒÖtek w zakresie dat z innƒÖ lokalizacjƒÖ."}
                    else: result = self.parent_widget._call_import_changes_procedure(nr_kadrowy, self.year, self.month, date_str, new_symbol)
                else:
                    result = self.parent_widget._call_import_changes_procedure(nr_kadrowy, self.year, self.month, date_str, new_symbol)
                    if result.get("success"):
                        params = (user_id, modyfikujacy_id, date_str, date_str, new_location_id, reason_for_change, 1, None)
                        self.parent_widget._manage_location_exception(params)
        else:
            result = self.parent_widget._call_import_changes_procedure(nr_kadrowy, self.year, self.month, date_str, new_symbol)
        
        if loc_changed and result.get("success"):
             overtime_events = self.parent_widget.data_provider.get_events_for_user_date(user_id, date_str)
             overtime_events = [e for e in overtime_events if e.get('type') == 'Nadgodziny']
             if overtime_events:
                ot_dialog = OvertimeLocationDialog(self, overtime_events, new_location_code, self.determined_theme)
                if ot_dialog.exec() == QDialog.Accepted:
                    location_changes = ot_dialog.get_selected_locations()
                    if location_changes: self.parent_widget._update_multiple_overtime_locations(location_changes)

        if result.get("success", False):
            status_item.setText("Sukces ‚úÖ"); status_item.setForeground(QColor("green"))
            returned_symbol = result.get('returned_symbol', new_symbol)
            self.cells_table.item(visual_row_index, 3).setText(returned_symbol)
            self.parent_widget._update_cells_with_new_symbols([(user_id, date_str, returned_symbol)])
            self.parent_widget.schedule_model.layoutChanged.emit()
            self.flattened_cells[original_data_index]['symbol'] = returned_symbol
        else:
            status_item.setText("Pora≈ºka ‚ùå"); status_item.setForeground(QColor("red"))
            error_msg = result.get("message", "Nieznany b≈ÇƒÖd.")
            QMessageBox.warning(self, "B≈ÇƒÖd", f"üë§ {user_name} ({self.format_date(date_str)}):\n{error_msg}", QMessageBox.Ok)
    
    except Exception as e:
        if status_item: status_item.setText("Pora≈ºka ‚ùå"); status_item.setForeground(QColor("red"))
        log_error(f"B≈ÇƒÖd krytyczny w _apply_change_for_row: {e}", exception=e)
        QMessageBox.critical(self, "B≈ÇƒÖd krytyczny", f"WystƒÖpi≈Ç nieoczekiwany b≈ÇƒÖd: {str(e)}", QMessageBox.Ok)
    finally:
        QTimer.singleShot(1000, lambda b=button: self._reset_button_state(b))
