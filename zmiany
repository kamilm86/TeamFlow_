# Plik: db_connector.py

    @staticmethod
    def get_connection():
        """
        Zwraca połączenie do bazy danych, automatycznie testując listę sterowników
        z pliku config.ini, aż znajdzie działający.
        """
        db_config = DATABASE_CONFIG
        
        if db_config.get('engine') != 'mssql':
            raise ValueError(f"Nieobsługiwany silnik bazy danych: {db_config.get('engine')}")

        # Pobierz listę sterowników z konfiguracji
        drivers_to_try = [driver.strip() for driver in db_config.get('driver_fallbacks', '').split(',')]
        if not drivers_to_try:
            raise ValueError("Brak zdefiniowanych sterowników w 'driver_fallbacks' w pliku config.ini.")
            
        base_connection_string = f"SERVER={db_config.get('server')};DATABASE={db_config.get('database')};"

        # Dodaj informacje o uwierzytelnianiu
        if db_config.get('trusted_connection', 'no').lower() == 'yes':
            base_connection_string += "Trusted_Connection=yes;"
        else:
            user = db_config.get('user')
            password = db_config.get('password')
            if user and password:
                base_connection_string += f"UID={user};PWD={password};"
            else:
                raise ValueError("Konfiguracja wymaga 'trusted_connection=yes' albo podania 'user' i 'password' w config.ini.")

        last_error = None
        # Pętla próbująca połączyć się z każdym sterownikiem z listy
        for driver in drivers_to_try:
            try:
                connection_string = f"DRIVER={{{driver}}};{base_connection_string}"
                debug_print(f"Próba połączenia z użyciem sterownika: {driver}")
                conn = pyodbc.connect(connection_string, timeout=5)
                debug_print(f"Połączenie udane! Użyty sterownik: {driver}")
                return conn # Jeśli połączenie się powiedzie, zwracamy je i kończymy funkcję
            except pyodbc.InterfaceError as e:
                last_error = e
                debug_print(f"Nie udało się połączyć używając '{driver}': {e}")
                continue # Jeśli sterownik nie pasuje, przejdź do następnego

        # Jeśli pętla zakończyła się i żadne połączenie się nie udało
        log_error("Nie udało się nawiązać połączenia z bazą danych przy użyciu żadnego z dostępnych sterowników.", exception=last_error)
        raise ConnectionError(
            f"Nie można połączyć się z bazą danych. Sprawdź konfigurację w pliku config.ini "
            f"oraz upewnij się, że przynajmniej jeden ze sterowników jest zainstalowany.\n\n"
            f"Ostatni błąd: {last_error}"
        ) from last_error
