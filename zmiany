@echo off
setlocal

:: ==================================================================
::                       KONFIGURACJA
:: ==================================================================
::
:: ---> WPISZ TUTAJ wymaganą wersję aplikacji <---
set "REQUIRED_VER=1.0.5"
::
:: Nazwa aplikacji i folderu
set "APP_NAME=TeamFlowApp.exe"
set "APP_FOLDER=TeamFlowApp"
::
:: Szablon ścieżki sieciowej. Zmienna %VERSION% zostanie zastąpiona numerem wersji podanym wyżej.
set "NET_PATH_TEMPLATE=\\mbank.pl\zasoby.Z-DBZ_APLIKACJE\USER_APP\TeamFlowApp\wersja_%VERSION%\%APP_NAME%"
::
:: ==================================================================


:: --- Sekcja automatyczna (nie edytuj) ---
set "LOCAL_DIR=%TEMP%\%APP_FOLDER%"
set "LOCAL_EXE=%LOCAL_DIR%\%APP_NAME%"
set "NET_PATH=%NET_PATH_TEMPLATE:%VERSION%=%REQUIRED_VER%%"

echo.[INFO] Wymagana wersja aplikacji: %REQUIRED_VER%
echo.[INFO] Lokalizacja lokalna: %LOCAL_EXE%
echo.[INFO] Lokalizacja sieciowa: %NET_PATH%

:: Utworzenie folderu lokalnego, jeśli nie istnieje
if not exist "%LOCAL_DIR%" mkdir "%LOCAL_DIR%" >nul

:: Sprawdzenie wersji i pobranie pliku za pomocą PowerShell
powershell -NoProfile -ExecutionPolicy Bypass -Command ^
    $ErrorActionPreference = 'Stop'; ^
    $localExe = '%LOCAL_EXE%'; ^
    $netPath = '%NET_PATH%'; ^
    $requiredVerString = '%REQUIRED_VER%'; ^
    $needsDownload = $false; ^
    try { ^
        if (Test-Path $localExe -PathType Leaf) { ^
            $localVersionString = (Get-Item $localExe).VersionInfo.FileVersion; ^
            if ([version]$localVersionString -ne [version]$requiredVerString) { ^
                Write-Host ('Lokalna wersja (' + $localVersionString + ') jest inna niz wymagana (' + $requiredVerString + '). Rozpoczynam pobieranie...'); ^
                $needsDownload = $true; ^
            } else { ^
                Write-Host ('Lokalna wersja (' + $localVersionString + ') jest aktualna. Pomijam pobieranie.'); ^
            } ^
        } else { ^
            Write-Host 'Aplikacja nie istnieje lokalnie. Rozpoczynam pobieranie...'; ^
            $needsDownload = $true; ^
        } ^
        if ($needsDownload) { ^
            Write-Host ('Pobieranie pliku z: ' + $netPath); ^
            $tmpFile = Join-Path -Path '%LOCAL_DIR%' -ChildPath ([guid]::NewGuid().ToString() + '.tmp'); ^
            Start-BitsTransfer -Source $netPath -Destination $tmpFile; ^
            Move-Item -Path $tmpFile -Destination $localExe -Force; ^
            Write-Host 'Pobieranie zakonczone pomyslnie.'; ^
        } ^
    } catch { ^
        Write-Host ('[BŁĄD] Wystapil krytyczny problem: ' + $_.Exception.Message) -ForegroundColor Red; ^
        exit 1; ^
    }

:: Sprawdzenie, czy PowerShell zakończył się błędem
if %errorlevel% neq 0 (
    echo.[BŁĄD] Nie udalo sie zweryfikowac lub pobrac aplikacji. Sprawdz komunikat powyzej.
    pause
    goto :eof
)

:: Uruchomienie aplikacji
echo.[INFO] Uruchamianie aplikacji...
start "Uruchamianie %APP_NAME%" "%LOCAL_EXE%"

endlocal
