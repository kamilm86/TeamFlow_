from PySide6.QtWidgets import QStyledItemDelegate, QStyleOptionViewItem, QPushButton, QApplication, QStyle
from PySide6.QtCore import Qt, QRect, QSize, QEvent, Signal
from PySide6.QtGui import QPainter, QColor, QBrush, QPen

from styles import AppStyles


class ButtonDelegate(QStyledItemDelegate):
    """
    Delegat wyświetlający przycisk w komórce, który może być nieaktywny
    w zależności od statusu zdarzenia.
    """
    button_clicked = Signal(int)

    def __init__(self, parent=None, button_text="Odwołaj", is_dark_theme=False):
        super().__init__(parent)
        self.button_text = button_text
        self.is_dark_theme = is_dark_theme
        self._pressed_row = -1

    def paint(self, painter, option, index):
        event_data = index.model().data(index, Qt.UserRole)
        status = event_data.get('status', '')
        is_disabled = status in ["Do delegacji", "Usunięty"]

        button_rect = QRect(option.rect).adjusted(4, 4, -4, -4)

        painter.save()
        painter.setRenderHint(QPainter.Antialiasing)

        # Wybór koloru w zależności od stanu
        if is_disabled:
            bg_color = QColor("#5a5a5a") if self.is_dark_theme else QColor("#d3d3d3")
            text_color = QColor("#888888") if self.is_dark_theme else QColor("#a0a0a0")
        elif self._pressed_row == index.row():
            bg_color = QColor("#c0392b")  # Ciemniejszy czerwony
        else:
            bg_color = QColor("#e74c3c")  # Standardowy czerwony

        painter.setBrush(bg_color)
        painter.setPen(Qt.NoPen)
        painter.drawRoundedRect(button_rect, 3, 3)

        painter.setPen(text_color if is_disabled else QColor("white"))
        painter.drawText(button_rect, Qt.AlignCenter, self.button_text)

        painter.restore()

    def editorEvent(self, event, model, option, index):
        event_data = index.data(Qt.UserRole)
        status = event_data.get('status', '')
        is_disabled = status in ["Do delegacji", "Usunięty"]

        if is_disabled:
            return False  # Ignoruj zdarzenia dla nieaktywnego przycisku

        if event.type() == QEvent.MouseButtonPress and option.rect.contains(event.pos()):
            self._pressed_row = index.row()
            return True
        elif event.type() == QEvent.MouseButtonRelease and self._pressed_row == index.row():
            self._pressed_row = -1
            self.button_clicked.emit(index.row())
            return True
        elif event.type() == QEvent.Leave:
            self._pressed_row = -1

        return False
