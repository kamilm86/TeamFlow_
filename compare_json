# compare_json.py
import json
import sys
from typing import Any, List

# Lista do przechowywania znalezionych r√≥≈ºnic w czytelnej formie
differences = []

def find_diff(data1: Any, data2: Any, path: str = "root"):
    """
    Rekursywna funkcja do por√≥wnywania dw√≥ch obiekt√≥w danych (zdekodowanych z JSON).
    Ignoruje kolejno≈õƒá element√≥w w listach.

    Args:
        data1: Pierwszy obiekt do por√≥wnania.
        data2: Drugi obiekt do por√≥wnania.
        path: ≈öcie≈ºka do bie≈ºƒÖcego elementu, u≈ºywana w raportowaniu r√≥≈ºnic.
    """
    # 1. Por√≥wnanie typ√≥w
    if type(data1) is not type(data2):
        differences.append(
            f"R√≥≈ºnica w ≈õcie≈ºce '{path}': inne typy danych "
            f"({type(data1).__name__} vs {type(data2).__name__})"
        )
        return

    # 2. Por√≥wnanie s≈Çownik√≥w (obiekt√≥w JSON)
    if isinstance(data1, dict):
        keys1 = set(data1.keys())
        keys2 = set(data2.keys())

        common_keys = keys1.intersection(keys2)
        added_keys = keys2 - keys1
        removed_keys = keys1 - keys2

        for key in added_keys:
            differences.append(f"W ≈õcie≈ºce '{path}' dodano klucz: '{key}'")
        for key in removed_keys:
            differences.append(f"W ≈õcie≈ºce '{path}' brakuje klucza: '{key}'")

        # Rekursywne por√≥wnanie warto≈õci dla wsp√≥lnych kluczy
        for key in common_keys:
            find_diff(data1[key], data2[key], path=f"{path}.{key}")

    # 3. Por√≥wnanie list (tablic JSON) - ignorowanie kolejno≈õci
    elif isinstance(data1, list):
        # Tworzymy kopie list, aby mo≈ºna by≈Ço z nich bezpiecznie usuwaƒá elementy
        list1_copy = [item for item in data1]
        list2_copy = [item for item in data2]
        
        # Iterujemy po elementach pierwszej listy i pr√≥bujemy znale≈∫ƒá i usunƒÖƒá
        # pasujƒÖcy element z kopii drugiej listy
        for item1 in data1:
            try:
                # Szukamy identycznego elementu w drugiej li≈õcie
                # Je≈õli siƒô uda, usuwamy go, aby oznaczyƒá jako "dopasowany"
                list2_copy.remove(item1)
            except ValueError:
                # Je≈õli elementu nie ma w drugiej li≈õcie, to jest to r√≥≈ºnica
                differences.append(
                    f"W li≈õcie '{path}' brakuje elementu: {json.dumps(item1, ensure_ascii=False)}"
                )

        # Wszystkie elementy, kt√≥re pozosta≈Çy w list2_copy, sƒÖ "dodatkowymi"
        # elementami w drugiej li≈õcie
        for item2 in list2_copy:
            differences.append(
                f"W li≈õcie '{path}' dodano element: {json.dumps(item2, ensure_ascii=False)}"
            )

    # 4. Por√≥wnanie warto≈õci prostych (string, number, boolean, null)
    else:
        if data1 != data2:
            val1_str = json.dumps(data1, ensure_ascii=False)
            val2_str = json.dumps(data2, ensure_ascii=False)
            differences.append(f"R√≥≈ºnica w ≈õcie≈ºce '{path}': {val1_str} vs {val2_str}")

def load_json_file(filepath: str) -> Any:
    """Wczytuje i dekoduje plik JSON, obs≈ÇugujƒÖc b≈Çƒôdy."""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"B≈ÅƒÑD: Nie znaleziono pliku: {filepath}")
        sys.exit(1)
    except json.JSONDecodeError as e:
        print(f"B≈ÅƒÑD: Plik '{filepath}' nie jest poprawnym plikiem JSON. {e}")
        sys.exit(1)

def main():
    """G≈Ç√≥wna funkcja programu."""
    if len(sys.argv) != 3:
        print("U≈ºycie: python compare_json.py <plik1.json> <plik2.json>")
        sys.exit(1)

    file1_path = sys.argv[1]
    file2_path = sys.argv[2]

    print(f"--- Por√≥wnywanie plik√≥w JSON ---")
    print(f"Plik 1: {file1_path}")
    print(f"Plik 2: {file2_path}")
    print("-" * 30)

    json1 = load_json_file(file1_path)
    json2 = load_json_file(file2_path)

    find_diff(json1, json2)

    if not differences:
        print("‚úÖ Pliki sƒÖ semantycznie identyczne.")
    else:
        print(f"üî• Znaleziono {len(differences)} r√≥≈ºnic:\n")
        for diff in differences:
            print(f"- {diff}")

if __name__ == "__main__":
    main()
