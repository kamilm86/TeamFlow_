# W pliku db_m.py, w klasie DatabaseManager

def get_engine(self, db_name, max_retries=3):
    """
    Pobiera silnik SQLAlchemy z puli lub tworzy nowy.
    Zawiera zaawansowane, automatyczne mechanizmy ponawiania i utrzymywania połączeń.
    """
    if db_name in self.connection_pools and self.connection_pools[db_name]['pool'] is not None:
        return self.connection_pools[db_name]['pool']

    self.logger.info(f"Tworzenie nowego silnika i puli połączeń dla: {db_name}")
    try:
        connection_string = self.connections[db_name]
        
        engine_args = {
            'pool_size': 5,
            'max_overflow': 10,
            'pool_recycle': 3500, # Proaktywne odświeżanie połączeń
            'pool_pre_ping': True # AUTOMATYCZNY TEST I PONAWIANIE POŁĄCZENIA
        }
        
        if db_name == 'Impala':
            engine_args['connect_args'] = {'timeout': 3600}

        engine = create_engine(connection_string, **engine_args)
        
        # Testowe połączenie przy tworzeniu silnika, aby od razu wyłapać błędy konfiguracyjne
        with engine.connect() as connection:
            self.logger.info(f"Testowe połączenie z '{db_name}' zakończone sukcesem.")
        
        self.connection_pools[db_name]['pool'] = engine
        return engine

    except Exception as e:
        self.logger.error(f"Nie udało się utworzyć silnika SQLAlchemy dla '{db_name}': {e}")
        raise
