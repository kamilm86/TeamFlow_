from db_connector import DatabaseConnector
import os
import getpass
from debug_utils import debug_print, log_warning, log_error


class SettingsDatabase:
    """Klasa do obsługi bazy danych ustawień użytkownika w SQL Server"""

    def __init__(self):
        pass

    def get_current_username(self):
        """Pobiera nazwę użytkownika używając getpass"""
        try:
            return getpass.getuser()
        except:
            return os.environ.get('USERNAME') or 'unknown_user'

    # --- ZMIANA: Dodano parametr `show_schedule_comment` ---
    def save_settings(self, theme, font_family, font_size, load_all_events=True, visible_columns=None,
                      show_schedule_comment=False, username=None):
        """Zapisuje ustawienia użytkownika do bazy danych SQL Server"""
        if username is None:
            username = self.get_current_username()

        try:
            conn = DatabaseConnector.get_connection()
            cursor = conn.cursor()

            columns_str = ','.join(visible_columns) if visible_columns else None

            # --- ZMIANA: Zaktualizowano wywołanie procedury ---
            # Założenie: procedura SaveUserSettings została zaktualizowana o nowy parametr @show_schedule_comment
            cursor.execute("""
                EXEC SaveUserSettings @username=?, @theme=?, @font_family=?, @font_size=?, @load_all_events=?, @visible_columns=?, @show_schedule_comment=?
            """, (username, theme, font_family, font_size, load_all_events, columns_str, show_schedule_comment))

            conn.commit()
            conn.close()
            debug_print(
                f"Ustawienia zapisane dla {username}: motyw={theme}, kolumny={visible_columns}, komentarz={show_schedule_comment}")
            return True
        except Exception as e:
            log_error(f"Błąd podczas zapisywania ustawień: {e}", exception=e)
            return False

    def load_settings(self, username=None):
        """Ładuje ustawienia użytkownika z bazy danych SQL Server"""
        if username is None:
            username = self.get_current_username()

        try:
            conn = DatabaseConnector.get_connection()
            cursor = conn.cursor()

            cursor.execute("EXEC GetUserSettings @username=?", (username,))
            result = cursor.fetchone()
            conn.close()

            if result:
                visible_columns = result[4].split(',') if len(result) >= 5 and result[4] else None

                # --- ZMIANA: Dodano wczytywanie nowej opcji ---
                show_comment = result[5] if len(result) >= 6 and result[5] is not None else False

                return {
                    'theme': result[0],
                    'font_family': result[1],
                    'font_size': result[2],
                    'load_all_events': result[3] if len(result) >= 4 else True,
                    'visible_columns': visible_columns,
                    'show_schedule_comment': bool(show_comment)
                }
            else:
                # Domyślne ustawienia
                return {
                    'theme': 'dark', 'font_family': 'Arial', 'font_size': 9,
                    'load_all_events': True, 'visible_columns': None, 'show_schedule_comment': False
                }
        except Exception as e:
            log_error(f"Błąd podczas ładowania ustawień: {e}", exception=e)
            return {
                'theme': 'dark', 'font_family': 'Arial', 'font_size': 9,
                'load_all_events': True, 'visible_columns': None, 'show_schedule_comment': False
            }
