@echo off
setlocal enabledelayedexpansion

:: ------------------- KONFIGURACJA -------------------
set "APP_NAME=TeamFlowApp.exe"
set "APP_FOLDER=TeamFlowApp"
:: Zaktualizuj szablon ścieżki sieciowej. %1 zostanie zastąpione numerem wersji podanym w parametrze.
set "NET_PATH_TEMPLATE=\\mbank.pl\zasoby.Z-DBZ_APLIKACJE\USER_APP\TeamFlowApp\wersja_%1\%APP_NAME%"
:: ----------------------------------------------------

:: --- Zmienne dynamiczne (nie edytuj) ---
set "LOCAL_DIR=%TEMP%\%APP_FOLDER%"
set "LOCAL_EXE=%LOCAL_DIR%\%APP_NAME%"

:: 1. Sprawdzenie, czy podano parametr z numerem wersji
if "%~1"=="" (
    echo.[BŁĄD] Nie podano wymaganego numeru wersji jako parametru.
    echo.[INFO] Przykład użycia: %~n0 1.0.5
    pause
    goto :eof
)
set "REQUIRED_VER=%1"
set "NET_PATH=!NET_PATH_TEMPLATE:%1=%REQUIRED_VER%!"

echo.[INFO] Wymagana wersja aplikacji: %REQUIRED_VER%
echo.[INFO] Lokalizacja lokalna: %LOCAL_EXE%
echo.[INFO] Lokalizacja sieciowa: %NET_PATH%

:: 2. Utworzenie folderu lokalnego, jeśli nie istnieje
if not exist "%LOCAL_DIR%" mkdir "%LOCAL_DIR%" >nul

:: 3. Sprawdzenie wersji i pobranie pliku za pomocą PowerShell
powershell -NoProfile -ExecutionPolicy Bypass -Command ^
    $ErrorActionPreference = 'Stop'; ^
    $localExe = '%LOCAL_EXE%'; ^
    $netPath = '%NET_PATH%'; ^
    $requiredVerString = '%REQUIRED_VER%'; ^
    $needsDownload = $false; ^
    try { ^
        if (Test-Path $localExe -PathType Leaf) { ^
            $localVersionString = (Get-Item $localExe).VersionInfo.FileVersion; ^
            if ([version]$localVersionString -ne [version]$requiredVerString) { ^
                Write-Host ('Lokalna wersja (' + $localVersionString + ') jest inna niż wymagana (' + $requiredVerString + '). Rozpoczynam pobieranie...'); ^
                $needsDownload = $true; ^
            } else { ^
                Write-Host ('Lokalna wersja (' + $localVersionString + ') jest aktualna. Pomijam pobieranie.'); ^
            } ^
        } else { ^
            Write-Host 'Aplikacja nie istnieje lokalnie. Rozpoczynam pobieranie...'; ^
            $needsDownload = $true; ^
        } ^
        if ($needsDownload) { ^
            Write-Host ('Pobieranie pliku z: ' + $netPath); ^
            $tmpFile = Join-Path -Path '%LOCAL_DIR%' -ChildPath ([guid]::NewGuid().ToString() + '.tmp'); ^
            Start-BitsTransfer -Source $netPath -Destination $tmpFile; ^
            Move-Item -Path $tmpFile -Destination $localExe -Force; ^
            Write-Host 'Pobieranie zakończone pomyślnie.'; ^
        } ^
    } catch { ^
        Write-Host ('[BŁĄD] Wystąpił krytyczny problem: ' + $_.Exception.Message) -ForegroundColor Red; ^
        exit 1; ^
    }

:: 4. Sprawdzenie, czy PowerShell zakończył się błędem
if %errorlevel% neq 0 (
    echo.[BŁĄD] Nie udało się zweryfikować lub pobrać aplikacji. Sprawdź komunikat powyżej.
    pause
    goto :eof
)

:: 5. Uruchomienie aplikacji
echo.[INFO] Uruchamianie aplikacji...
start "Uruchamianie %APP_NAME%" "%LOCAL_EXE%"

endlocal
