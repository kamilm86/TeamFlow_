from config import APP_VERSION
import pyodbc
from config import DATABASE_CONFIG
import getpass
from debug_utils import debug_print, log_warning, log_error
from config import SQL_OBJECTS
from app_settings import app_settings

class DatabaseConnector:
    @staticmethod
    def get_connection():
        db_config = DATABASE_CONFIG
        if db_config.get('engine') != 'mssql':
            raise ValueError(f"Nieobsługiwany silnik bazy danych: {db_config.get('engine')}")

        drivers_str = db_config.get('driver', '')
        drivers = [d.strip() for d in drivers_str.split(',') if d.strip()]

        if not drivers:
            raise ValueError("Brak zdefiniowanych sterowników w pliku config.ini w sekcji [database] pod kluczem 'driver'.")

        base_connection_string = (
            f"SERVER={db_config.get('server')};"
            f"DATABASE={db_config.get('database')};"
        )
        if db_config.get('trusted_connection', 'no').lower() == 'yes':
            base_connection_string += "Trusted_Connection=yes;"
        else:
            user, password = db_config.get('user'), db_config.get('password')
            if user and password:
                base_connection_string += f"UID={user};PWD={password};"
            else:
                raise ValueError("Konfiguracja wymaga 'trusted_connection=yes' albo podania 'user' i 'password'.")

        last_error = None
        for driver in drivers:
            try:
                connection_string = f"DRIVER={{{driver}}};{base_connection_string}"
                # debug_print(f"Próba połączenia ze sterownikiem: {driver}")
                conn = pyodbc.connect(connection_string, timeout=5)
                # debug_print(f"Połączenie udane przy użyciu sterownika: {driver}")
                return conn
            except pyodbc.Error as e:
                last_error = e
                log_warning(f"Nie udało się połączyć przy użyciu sterownika '{driver}': {e}")
                continue

        raise ConnectionError(f"Nie udało się nawiązać połączenia z bazą danych przy użyciu żadnego z podanych sterowników: {drivers_str}. Ostatni błąd: {last_error}")

def get_modifier_id():
    username = getpass.getuser()
    try:
        conn = DatabaseConnector.get_connection()
        cursor = conn.cursor()
        query = f"SELECT * FROM {SQL_OBJECTS['fn_getuserappinfo']}(?)"
        cursor.execute(query, (username,))
        result = cursor.fetchone()
        conn.close()
        if result and len(result) >= 5:
            # --- ZMIANA: Dodajemy 'username' do zwracanej krotki ---
            return result[0], result[1], result[2], bool(result[3]), result[4], username
        return "System", username, "Użytkownik", False, None, username
    except Exception as e:
        log_error(f"Błąd podczas pobierania informacji o użytkowniku ({username}): {e}", exception=e)
        return "System", username, "Użytkownik", False, None, username


def load_all_app_settings(existing_conn=None):
    """
    Ładuje wszystkie ustawienia z tabeli appsettings.
    Może użyć istniejącego połączenia lub stworzyć własne.
    """
    conn = existing_conn
    try:
        # Jeśli nie przekazano istniejącego połączenia, stwórz nowe i zarządzaj nim
        if not conn:
            conn = DatabaseConnector.get_connection()

        cursor = conn.cursor()
        cursor.execute(f"SELECT SettingKey, SettingValue FROM {SQL_OBJECTS['appsettings']}")
        results = cursor.fetchall()

        # Jeśli połączenie było stworzone tylko na potrzeby tej funkcji, zamknij je
        if not existing_conn:
            conn.close()

        if not results:
            log_error("Błąd krytyczny: Tabela [appsettings] jest pusta lub nie istnieje.")
            return False

        for row in results:
            if row.SettingKey and row.SettingValue:
                app_settings.parse_and_apply(row.SettingKey, row.SettingValue)
        # Nie logujemy tutaj sukcesu, aby uniknąć zaśmiecania logów co minutę
        return True
    except Exception as e:
        # Jeśli połączenie było stworzone tutaj i wystąpił błąd, spróbuj je zamknąć
        if not existing_conn and conn:
            try:
                conn.close()
            except Exception:
                pass
        log_error(f"Błąd krytyczny podczas ładowania ustawień aplikacji: {e}", exception=e)
        return False
