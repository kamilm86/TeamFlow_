import sqlite3
import pyodbc
from config import DATABASE_CONFIG, ENVIRONMENT
from datetime import datetime, timedelta, time
import getpass
from debug_utils import debug_print, log_warning, log_error

class DatabaseConnector:
    """
    Klasa odpowiedzialna za połączenie z bazą danych
    """

    @staticmethod
    def get_connection():
        """
        Zwraca połączenie do bazy danych na podstawie konfiguracji
        """
        db_config = DATABASE_CONFIG[ENVIRONMENT]

        if db_config['ENGINE'] == 'QSQLITE':
            conn = sqlite3.connect(db_config['NAME'])
            return conn

        elif db_config['ENGINE'] == 'mssql':
            # Połączenie do MS SQL Server
            connection_string = (
                f"DRIVER={{{db_config['DRIVER']}}};"
                f"SERVER={db_config['SERVER']};"
                f"DATABASE={db_config['DATABASE']};"
            )

            # Dodaj uwierzytelnianie
            if 'TRUSTED_CONNECTION' in db_config and db_config['TRUSTED_CONNECTION'] == 'yes':
                connection_string += "Trusted_Connection=yes;"
            else:
                connection_string += f"UID={db_config['USER']};PWD={db_config['PASSWORD']};"

            conn = pyodbc.connect(connection_string)
            return conn

        else:
            raise ValueError(f"Nieobsługiwany silnik bazy danych: {db_config['ENGINE']}")

    @staticmethod
    def execute_query(query, params=None, fetch_all=True):
        """
        Wykonuje zapytanie SQL i zwraca wyniki

        Args:
            query (str): Zapytanie SQL
            params (tuple): Parametry zapytania
            fetch_all (bool): Czy pobrać wszystkie wyniki (True) czy tylko jeden (False)

        Returns:
            list/tuple: Wyniki zapytania
        """

        conn = DatabaseConnector.get_connection()
        cursor = conn.cursor()

        start_time = time.time()
        try:
            if params:
                cursor.execute(query, params)
            else:
                cursor.execute(query)

            if fetch_all:
                result = cursor.fetchall()
            else:
                result = cursor.fetchone()

            end_time = time.time()
            execution_time = end_time - start_time

            # Loguj zapytanie SQL
            debug_print(query, params, execution_time)

            conn.commit()
            conn.close()

            return result
        except Exception as e:
            end_time = time.time()
            execution_time = end_time - start_time

            # Loguj błąd zapytania
            log_error(query, params, str(e))

            # Zamknij połączenie
            try:
                conn.close()
            except:
                pass

            # Ponownie zgłoś wyjątek
            raise


def get_modifier_id():
    """
    Pobiera informacje o zalogowanym użytkowniku, w tym jego wydział.
    Returns:
        tuple: (user_id, user_app_id, user_app_role, visible_next_month, user_department)
    """
    username = getpass.getuser()

    try:
        conn = DatabaseConnector.get_connection()
        cursor = conn.cursor()

        query = "SELECT * FROM [dbo].[GetUserAppInfo](?)"

        cursor.execute(query, (username,))
        result = cursor.fetchone()
        conn.close()

        if result and len(result) >= 5: # Sprawdź, czy zwrócono wystarczająco dużo kolumn
            user_id = result[0]
            user_app_id = result[1]
            user_app_role = result[2]
            visible_next_month = result[3]
            user_department = result[4] # NOWA, PIĄTA WARTOŚĆ

            return user_id, user_app_id, user_app_role, bool(visible_next_month), user_department

        # Wartości domyślne, gdy nie znaleziono użytkownika lub struktura jest niepoprawna
        return "System", username, "Użytkownik", False, None

    except Exception as e:
        log_error(f"Błąd podczas pobierania informacji o użytkowniku ({username}): {e}", exception=e)
        # Wartości domyślne w przypadku błędu
        return "System", username, "Użytkownik", False, None


