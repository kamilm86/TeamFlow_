
@echo off
echo Kopiowanie plikow aplikacji na dysk lokalny, prosze czekac...

:: Ustawia sciezke do folderu tymczasowego uzytkownika
set "LOCAL_APP_PATH=%TEMP%\TeamFlowApp"

:: Kopiuje caly folder aplikacji z dysku sieciowego na dysk lokalny (tylko jesli sa zmiany)
xcopy /s /e /d /y "%~dp0" "%LOCAL_APP_PATH%\"

echo Uruchamianie aplikacji...

:: Uruchamia aplikacje z lokalnej kopii
start "" "%LOCAL_APP_PATH%\TeamFlowApp.exe"

exit
-------------------------------------------------------------------------------
@echo off
::
:: Inteligentny skrypt startowy dla TeamFlowApp
:: Kopiuje/aktualizuje aplikacje z sieci i uruchamia ja lokalnie.
::

:: 1. Ustawienie zmiennych
:: Sciezka do folderu z aplikacja na dysku sieciowym (tam gdzie jest ten plik .bat)
set "SOURCE_PATH=%~dp0"
:: Sciezka docelowa na dysku lokalnym uzytkownika (bezpieczna i nie wymaga admina)
set "LOCAL_PATH=%LOCALAPPDATA%\TeamFlowApp"

:: Komunikat dla uzytkownika
echo Sprawdzanie aktualizacji TeamFlowApp, prosze czekac...

:: 2. Synchronizacja plikow za pomoca robocopy
::    /E  - Kopiuje podfoldery (wazne dla folderu _internal)
::    /XO - Exclude Older - Kopiuje tylko pliki, ktore sa nowsze w zrodle. To jest klucz do aktualizacji!
::    /R:2 /W:5 - W razie problemu z siecia, sprobuj 2 razy co 5 sekund.
::    Pozostale parametry wylaczaja zbedne komunikaty w konsoli.
robocopy "%SOURCE_PATH%" "%LOCAL_PATH%" /E /XO /R:2 /W:5 /NFL /NDL /NJH /NJS /nc /ns /np

:: 3. Uruchomienie aplikacji z lokalnej kopii
echo Uruchamianie aplikacji...
start "" "%LOCAL_PATH%\TeamFlowApp.exe"

exit
-------------------------------------------------------------------------------------------------
# -*- mode: python ; coding: utf-8 -*-

# =============================================================================
#  Zoptymalizowany plik .spec dla TeamFlowApp (wersja z QtCharts)
# =============================================================================

# --- Sekcja optymalizacji: Definiujemy moduły i biblioteki do wykluczenia ---

# Lista modułów Pythona, które są duże i niepotrzebne w finalnej aplikacji.
# Wykluczenie ich znacząco zmniejsza rozmiar i przyspiesza start.
excluded_modules = [
    'tkinter',          # Nie używamy GUI opartego na tkinter
    'unittest',         # Moduł do testów, zbędny w wersji produkcyjnej
    'matplotlib',       # Już nieużywane, ale jawnie wykluczamy dla pewności
    'numpy',            # Już nieużywane
    'PySide6.QtDesigner', # Narzędzia dla deweloperów
    'PySide6.QtXml',      # Obsługa XML, jeśli nie jest używana
    'PySide6.QtTest',     # Moduł do testowania Qt
    'PySide6.QtNetwork',  # Jeśli aplikacja nie korzysta z funkcji sieciowych Qt
    'PySide6.QtOpenGL',   # Obsługa OpenGL, zbędna dla wykresów 2D
    'PySide6.QtPrintSupport', # Obsługa drukowania
    'sqlite3',          # Używamy pyodbc do połączenia z MSSQL
]

# Lista plików binarnych (.dll), które są niepotrzebne.
# Głównie są to sterowniki do baz danych, których nie używamy.
excluded_binaries = [
    'qsqlpsql.dll',     # Sterownik dla PostgreSQL
    'qsqloci.dll',      # Sterownik dla Oracle
    'qsqlibase.dll',    # Sterownik dla InterBase
    'qsqlmimer.dll',    # Specyficzny sterownik, rzadko używany
]


# --- Główna konfiguracja analizy PyInstallera ---

a = Analysis(
    ['main.py'],
    pathex=[],
    binaries=[],
    datas=[],
    # ZMIANA: Dodajemy PySide6.QtCharts, aby wykresy działały poprawnie
    hiddenimports=['pyodbc', 'PySide6.QtSql', 'PySide6.QtCharts'],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    # ZMIANA: Używamy naszej listy wykluczonych modułów
    excludes=excluded_modules,
    noarchive=False,
    # Użycie `COLLECT` zamiast `EXE` do filtrowania binariów jest bardziej nowoczesne,
    # ale to podejście jest również poprawne i czytelne.
)
pyz = PYZ(a.pure)

exe = EXE(
    pyz,
    a.scripts,
    [], # Przekazujemy pustą listę, bo binaria dodamy w sekcji COLLECT
    a.zipfiles,
    a.datas,
    [],
    name='TeamFlowApp',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,  # Kompresja pliku .exe, można wyłączyć (upx=False) jeśli powoduje problemy z antywirusem
    upx_exclude=[],
    runtime_tmpdir=None,
    # Zawsze używaj `onefile=False` (tryb folderu) dla najlepszej wydajności startu
    onefile=False,
    windowed=True,
    icon=False, # Możesz tu podać ścieżkę do pliku .ico
    console=False,
)

# --- Sekcja składania finalnej aplikacji ---

# Filtrujemy listę binariów, usuwając te z naszej listy wykluczeń
filtered_binaries = [b for b in a.binaries if b[0] not in excluded_binaries]

# Składamy finalny folder aplikacji
coll = COLLECT(
    exe,
    filtered_binaries, # Używamy przefiltrowanej listy bibliotek
    a.zipfiles,
    a.datas,
    strip=False,
    upx=True,
    upx_exclude=[],
    name='TeamFlowApp',
)
----------------------------------------------------------------------

pyinstaller --name "TeamFlowApp" --onefile --windowed --add-data "config.ini;." main.py

--------
@echo off
setlocal enabledelayedexpansion

:: ============================================================================
:: KONFIGURACJA - ZMIEŃ TYLKO TE DWIE LINIE
:: ============================================================================
set "SourceDir=\\serwer\zasob\Sciezka\Do\Aplikacji"
set "AppName=TeamFlowApp.exe"
:: ============================================================================

:: Definicje ścieżek
set "LocalDir=%TEMP%\TeamFlowAppCache"
set "LocalAppPath=%LocalDir%\%AppName%"
set "SourceAppPath=%SourceDir%\%AppName%"

:: Utworzenie folderu lokalnego
if not exist "%LocalDir%" mkdir "%LocalDir%" >nul 2>nul

title Uruchamianie TeamFlowApp...
cls
echo.
echo  ======================================
echo     Uruchamianie aplikacji TeamFlow
echo  ======================================
echo.
echo  Trwa sprawdzanie wersji, prosze czekac...

:: Sprawdzenie dostępności pliku na serwerze
if not exist "%SourceAppPath%" (
    echo.
    echo [BLAD] Nie mozna odnalezc pliku aplikacji na serwerze.
    echo        Sprawdz polaczenie sieciowe, VPN lub poprawnosc sciezki.
    pause
    exit /b
)

:: Pobranie wersji pliku z serwera
set "SourceVersion="
for /f "usebackq delims=" %%i in (`powershell -NoProfile -Command "(Get-Item -LiteralPath '%SourceAppPath%').VersionInfo.FileVersion"`) do set "SourceVersion=%%i"

:: Pobranie wersji pliku lokalnego
set "LocalVersion=0"
if exist "%LocalAppPath%" (
    for /f "usebackq delims=" %%i in (`powershell -NoProfile -Command "(Get-Item -LiteralPath '%LocalAppPath%').VersionInfo.FileVersion"`) do set "LocalVersion=%%i"
)

:: Porównanie wersji
if "%SourceVersion%"=="%LocalVersion%" (
    echo  Wersja aplikacji jest aktualna.
    goto LaunchApp
)

:: Kopiowanie, jeśli wersje się różnią lub pliku lokalnego nie ma
if "%LocalVersion%"=="0" (
    echo  Pobieranie aplikacji (pierwsze uruchomienie)...
) else (
    echo  Dostepna jest nowa wersja. Aktualizowanie...
)
echo  To moze potrwac chwile...
echo.

:: --- NOWA, BARDZIEJ NIEZAWODNA METODA KOPIOWANIA ---
:: Użycie PowerShell do skopiowania pliku, co jest bardziej odporne na problemy sieciowe.
powershell -NoProfile -Command "Copy-Item -Path '%SourceAppPath%' -Destination '%LocalAppPath%' -Force"

:: Sprawdzenie, czy kopiowanie się powiodło
:: PowerShell ustawia %ERRORLEVEL% na 0 w razie sukcesu, a na 1 (lub więcej) w razie błędu.
if %ERRORLEVEL% EQU 0 (
    echo  Aktualizacja zakonczona pomyslnie.
) else (
    echo.
    echo [BLAD] Wystapil blad podczas kopiowania nowej wersji.
    echo        Mozliwy problem z uprawnieniami do odczytu pliku na serwerze.
    echo        Skontaktuj sie z pomoca techniczna.
    pause
    exit /b
)

:LaunchApp
:: Ostateczne sprawdzenie, czy plik istnieje lokalnie
if not exist "%LocalAppPath%" (
    echo [BLAD KRYTYCZNY] Plik aplikacji nie zostal poprawnie skopiowany.
    pause
    exit /b
)

echo  Uruchamianie aplikacji...
start "" "%LocalAppPath%"
exit /b


