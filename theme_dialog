from PySide6.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QLabel,
                               QPushButton, QComboBox, QGroupBox, QRadioButton,
                               QFontComboBox, QSpinBox, QColorDialog, QCheckBox, QWidget, QTextEdit,
    QFrame, QButtonGroup, QTabWidget, QGridLayout, QMessageBox, QLineEdit, QApplication, QSpacerItem, QSizePolicy,
    QTableWidget, QTableWidgetItem, QHeaderView)  # Dodaj QTableWidget, QTableWidgetItem, QHeaderView
from PySide6.QtCore import Qt, Signal, QTime
from PySide6.QtGui import QFont
from db_connector import DatabaseConnector, get_modifier_id  # Dodaj import get_modifier_id

class ThemeSettingsDialog(QDialog):
    """
    Dialog do wyboru ustawień motywu aplikacji.
    """
    settings_changed = Signal(str, str, int)  # Sygnał: motyw, czcionka, rozmiar

    def __init__(self, parent=None, current_theme="dark", current_font="", current_font_size=9):
        super().__init__(parent)

        self.setWindowTitle("Ustawienia motywu")
        self.setMinimumWidth(400)

        # Wartości początkowe
        self.current_theme = current_theme
        self.current_font = current_font
        self.current_font_size = current_font_size
        self.parent = parent

        self.setup_ui()

    def setup_ui(self):
        main_layout = QVBoxLayout(self)

        # Grupa wyboru motywu
        theme_group = QGroupBox("Motyw")
        theme_layout = QVBoxLayout()

        # Zostawiamy tylko ciemny i jasny motyw
        self.dark_theme_radio = QRadioButton("Ciemny")
        self.light_theme_radio = QRadioButton("Jasny")

        # Ustawienie bieżącego motywu
        if self.current_theme == "dark":
            self.dark_theme_radio.setChecked(True)
        elif self.current_theme == "light":
            self.light_theme_radio.setChecked(True)
        else:
            self.dark_theme_radio.setChecked(True)  # Domyślnie ciemny

        theme_layout.addWidget(self.dark_theme_radio)
        theme_layout.addWidget(self.light_theme_radio)
        theme_group.setLayout(theme_layout)

        # Grupa ustawień czcionki
        font_group = QGroupBox("Czcionka")
        font_layout = QVBoxLayout()

        # Wybór rodzaju czcionki
        font_type_layout = QHBoxLayout()
        font_type_label = QLabel("Typ czcionki:")
        self.font_combo = QFontComboBox()
        if self.current_font:
            self.font_combo.setCurrentFont(QFont(self.current_font))
        font_type_layout.addWidget(font_type_label)
        font_type_layout.addWidget(self.font_combo)

        # Wybór rozmiaru czcionki
        font_size_layout = QHBoxLayout()
        font_size_label = QLabel("Rozmiar czcionki:")
        self.font_size_spin = QSpinBox()
        self.font_size_spin.setRange(6, 24)
        self.font_size_spin.setValue(self.current_font_size)
        font_size_layout.addWidget(font_size_label)
        font_size_layout.addWidget(self.font_size_spin)

        font_layout.addLayout(font_type_layout)
        font_layout.addLayout(font_size_layout)
        font_group.setLayout(font_layout)

        # Opcja zapisania ustawień
        self.save_settings_checkbox = QCheckBox("Zapamiętaj ustawienia")
        self.save_settings_checkbox.setChecked(True)

        # Przyciski OK i Anuluj
        buttons_layout = QHBoxLayout()
        self.ok_button = QPushButton("OK")
        self.cancel_button = QPushButton("Anuluj")

        self.ok_button.clicked.connect(self.accept)
        self.cancel_button.clicked.connect(self.reject)

        buttons_layout.addStretch()
        buttons_layout.addWidget(self.ok_button)
        buttons_layout.addWidget(self.cancel_button)

        # Dodanie wszystkich elementów do głównego layoutu
        main_layout.addWidget(theme_group)
        main_layout.addWidget(font_group)
        main_layout.addWidget(self.save_settings_checkbox)
        main_layout.addLayout(buttons_layout)

        # Podłączenie sygnałów do natychmiastowej zmiany - ale dopiero po utworzeniu komponentów
        self.dark_theme_radio.toggled.connect(lambda checked: self.apply_immediate_changes() if checked else None)
        self.light_theme_radio.toggled.connect(lambda checked: self.apply_immediate_changes() if checked else None)
        self.font_combo.currentFontChanged.connect(self.apply_immediate_changes)
        self.font_size_spin.valueChanged.connect(self.apply_immediate_changes)

    def apply_immediate_changes(self):
        """Aplikuje zmiany natychmiastowo podczas wybierania opcji"""
        # Upewnij się, że komponenty zostały już utworzone
        if not hasattr(self, 'font_combo') or not hasattr(self, 'font_size_spin'):
            return

        # Ustal bieżący motyw
        theme = self.get_current_theme()

        # Pobierz wybraną czcionkę i rozmiar
        font = self.font_combo.currentFont().family()
        font_size = self.font_size_spin.value()

        # Emituj sygnał z ustawieniami
        self.settings_changed.emit(theme, font, font_size)

    def get_current_theme(self):
        """Zwraca nazwę aktualnie wybranego motywu"""
        if self.dark_theme_radio.isChecked():
            return "dark"
        elif self.light_theme_radio.isChecked():
            return "light"
        else:
            return "dark"


class InsertSymbolDialog(QDialog):
    """
    Dialog do wyboru symbolu urlopu lub nieobecności z zakładkami.
    Zmniejszony, z podpowiedziami zamiast legendy i ulepszoną obsługą.
    """
    symbol_selected = Signal(str)  # Sygnał z wybranym symbolem

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Wstaw symbol")
        self.setMinimumWidth(300)  # Zmniejszone okno
        self.setMinimumHeight(200)  # Zmniejszone okno

        self.selected_symbol = ""
        self.user_role = ""  # Będzie ustawiane na podstawie roli użytkownika
        self.valid_symbols = set()  # Zbiór wszystkich dostępnych symboli

        # Pobierz rolę użytkownika z rodzica (głównego okna)
        if parent and hasattr(parent, 'current_user_role'):
            self.user_role = parent.current_user_role

        # Pobierz czcionkę z głównego okna aplikacji
        self.parent_font = QApplication.font()
        if parent:
            self.parent_font = parent.font()

        self.setup_ui()

    def setup_ui(self):
        main_layout = QVBoxLayout(self)

        # Dodaj instrukcję nad polem do wprowadzania symbolu
        instruction_label = QLabel("Wpisz symbol lub wybierz z poniższych zakładek")
        instruction_label.setStyleSheet("color: gray; font-style: italic;")
        instruction_label.setFont(self.parent_font)  # Użyj czcionki z głównego okna
        main_layout.addWidget(instruction_label)

        # Pole do ręcznego wpisania symbolu
        input_layout = QHBoxLayout()
        input_label = QLabel("Symbol:")
        input_label.setStyleSheet("font-weight: bold;")
        input_label.setFont(self.parent_font)  # Użyj czcionki z głównego okna

        self.symbol_input = QLineEdit()
        self.symbol_input.setMaxLength(5)  # Ograniczenie długości

        # Utwórz czcionkę na podstawie rodzica, ale pogrubioną i większą
        font = QFont(self.parent_font)
        font.setBold(True)
        font.setPointSize(font.pointSize() + 2)  # Nieco większa czcionka
        self.symbol_input.setFont(font)

        self.symbol_input.setStyleSheet("""
            padding: 5px;
            min-height: 30px;
        """)

        # Ustaw transformację tekstu na duże litery
        self.symbol_input.textChanged.connect(self.on_symbol_input_changed)
        # Dodajemy obsługę klawisza Enter z własną metodą weryfikacji
        self.symbol_input.returnPressed.connect(self.check_and_accept)

        input_layout.addWidget(input_label)
        input_layout.addWidget(self.symbol_input)

        main_layout.addLayout(input_layout)

        # Zakładki
        self.tabs = QTabWidget()
        self.tabs.setFont(self.parent_font)  # Użyj czcionki z głównego okna

        # Definicje symboli w kategoriach
        popularne_symbole = [
            ("UZ", "Urlop na żądanie"),
            ("CO", "Zwolnienie lekarskie"),
            ("CR", "Zwolnienie lekarskie na inną osobę we wspólnym gospodarstwie")
        ]
        urlopy_symbole = [
            ("U", "Urlop wypoczynkowy"),
            ("UB", "Urlop bezpłatny"),
            ("UD", "Urlop dodatkowy z tytułu niepełnosprawności"),
            ("UM", "Urlop macierzyński (20 tyg., Dodatkowy 6 tyg., Rodzicielski 26 tyg.)"),
            ("UO", "Urlop okolicznościowy"),
            ("UOD", "Opieka nad dzieckiem do lat 14"),
            ("US", "Urlop szkolny"),
            ("UT", "Urlop ojcowski"),
            ("UW", "Urlop wychowawczy"),
            ("UZ", "Urlop na żądanie"),
            ("UOP", "5 dni opieki na dziecko lub członka rodziny - urlop opiekuńczy")
        ]
        zwolnienia_symbole = [
            ("CO", "Zwolnienie lekarskie"),
            ("CR", "Zwolnienie lekarskie na inną osobę we wspólnym gospodarstwie"),
            ("CRW", "Zwolnienie lekarskie na opiekę (sytuacja wyjątkowa)"),
            ("CSR", "Świadczenie rehabilitacyjne"),
            ("ZO", "Zwolnienie z obowiązku świadczenia pracy"),
            ("ZS", "Zwolnienie z obowiązku świadczenia pracy (sytuacja wyjątkowa)")
        ]
        delegacje_symbole = [
            ("DK", "Podróż służbowa krajowa"),
            ("DZ", "Podróż służbowa zagraniczna"),
            ("HO", "Home Office"),
            ("P", "Czasowe oddelegowanie"),
            ("PD", "Prace dodatkowe")
        ]
        inne_symbole = [
            ("BC", "Doradca w backup"),
            ("BK", "Badanie kontrolne"),
            ("BO", "Badanie okresowe"),
            ("CW", "Ćwiczenia wojskowe"),
            ("DYS", "Realizacja dyspozycji"),
            ("MW", "mWolne"),
            ("NN", "Nieobecność nieusprawiedliwiona"),
            ("NU", "Nieobecność usprawiedliwiona"),
            ("NW", "Nieobecność do wyjaśnienia"),
            ("O", "Nieobecność usprawiedliwiona z tytułu odbioru godzin"),
            ("OS", "Odbiór dnia wolnego za święto przypadające w sobotę"),
            ("S", "Szkolenie po programie adaptacyjnym"),
            ("T", "Testy"),
            ("USW", "2 dni wolne na zwolnienie od pracy z powodu siły wyższej"),
            ("Z", "Rozwiązanie umowy")
        ]

        # Zbierz wszystkie dostępne symbole
        all_symbol_lists = [popularne_symbole, urlopy_symbole, zwolnienia_symbole, delegacje_symbole, inne_symbole]
        for symbol_list in all_symbol_lists:
            for symbol, _ in symbol_list:
                self.valid_symbols.add(symbol)

        # Dodanie zakładek w zależności od roli
        if self.user_role == "Lider":
            # Lider widzi tylko Zwolnienia i Popularne symbole
            # self.add_tab_with_symbols(popularne_symbole, "Popularne symbole")
            self.add_tab_with_symbols(zwolnienia_symbole, "Zwolnienia")
        elif self.user_role == "Pracownik WPR":
            # Menadżer widzi wszystko
            # self.add_tab_with_symbols(popularne_symbole, "Popularne symbole")
            # self.add_tab_with_symbols(urlopy_symbole, "Urlopy")
            self.add_tab_with_symbols(zwolnienia_symbole, "Zwolnienia")
            # self.add_tab_with_symbols(delegacje_symbole, "Delegacje i praca zdalna")
            # self.add_tab_with_symbols(inne_symbole, "Inne")
        else:
            pass
            # # Domyślnie - użytkownik standardowy widzi wszystkie zakładki
            # self.add_tab_with_symbols(popularne_symbole, "Popularne symbole")
            # self.add_tab_with_symbols(urlopy_symbole, "Urlopy")
            # self.add_tab_with_symbols(zwolnienia_symbole, "Zwolnienia")
            # self.add_tab_with_symbols(delegacje_symbole, "Delegacje i praca zdalna")
            # self.add_tab_with_symbols(inne_symbole, "Inne")

        # Tylko przycisk Anuluj
        buttons_layout = QHBoxLayout()
        self.cancel_button = QPushButton("Anuluj")
        self.cancel_button.setFont(self.parent_font)  # Użyj czcionki z głównego okna
        self.cancel_button.clicked.connect(self.reject)

        # Dodaj informację o prawidłowości symbolu
        self.validation_label = QLabel("")
        self.validation_label.setFont(self.parent_font)  # Użyj czcionki z głównego okna

        buttons_layout.addWidget(self.validation_label)
        buttons_layout.addStretch()
        buttons_layout.addWidget(self.cancel_button)

        # Dodanie elementów do głównego layoutu
        main_layout.addWidget(self.tabs)
        main_layout.addLayout(buttons_layout)

        # Ustaw focus na pole wpisywania
        self.symbol_input.setFocus()

    def add_tab_with_symbols(self, symbols, tab_name):
        """Dodaje zakładkę z symbolami do tabwidget"""
        tab = QWidget()
        tab_layout = QGridLayout(tab)
        tab_layout.setSpacing(5)

        for idx, (symbol, desc) in enumerate(symbols):
            button = QPushButton(symbol)
            button.setFont(self.parent_font)
            button.setFixedSize(60, 20)
            button.setToolTip(desc)
            button.setProperty("symbol", symbol)
            button.setFocusPolicy(Qt.NoFocus)  # Wyłącz fokus dla przycisku
            button.clicked.connect(self.on_symbol_button_clicked)
            row = idx // 4
            col = idx % 4
            tab_layout.addWidget(button, row, col)

        tab_layout.addItem(QSpacerItem(10, 10, QSizePolicy.Expanding, QSizePolicy.Expanding),
                           (len(symbols) // 4) + 1, 0, 1, 4)
        self.tabs.addTab(tab, tab_name)

    def on_symbol_button_clicked(self):
        """Obsługuje kliknięcie przycisku z symbolem"""
        button = self.sender()  # Pobierz obiekt, który wysłał sygnał
        if button:
            symbol = button.property("symbol")
            if symbol:
                self.accept_symbol(symbol)

    def on_symbol_input_changed(self, text):
        """Obsługuje zmianę symbolu wpisanego z klawiatury"""
        # Konwersja do dużych liter
        uppercase_text = text.upper()
        if text != uppercase_text:
            # Blokuj sygnał, aby uniknąć nieskończonej pętli
            self.symbol_input.blockSignals(True)
            self.symbol_input.setText(uppercase_text)
            self.symbol_input.blockSignals(False)

        self.selected_symbol = uppercase_text.strip()

        # Sprawdź, czy symbol jest na liście dostępnych
        if self.selected_symbol:
            if self.selected_symbol in self.valid_symbols:
                self.validation_label.setText("Symbol prawidłowy")
                self.validation_label.setStyleSheet("color: green;")
            else:
                self.validation_label.setText("Symbol niedostępny!")
                self.validation_label.setStyleSheet("color: red;")
        else:
            self.validation_label.setText("")

    def accept_symbol(self, symbol):
        """Akceptuje symbol i zamyka dialog"""
        self.selected_symbol = symbol

        # Blokuj sygnał, aby uniknąć wywołania on_symbol_input_changed
        self.symbol_input.blockSignals(True)
        self.symbol_input.setText(symbol)
        self.symbol_input.blockSignals(False)

        # Aktualizuj etykietę walidacji
        self.validation_label.setText("Symbol prawidłowy")
        self.validation_label.setStyleSheet("color: green;")

        # Wywołaj metodę sprawdzającą
        self.check_and_accept()

    def check_and_accept(self):
        if self.selected_symbol and self.selected_symbol in self.valid_symbols:
            super().accept()
        elif self.selected_symbol:
            QMessageBox.warning(
                self,
                "Nieprawidłowy symbol",
                f"Symbol '{self.selected_symbol}' nie znajduje się na liście dostępnych symboli.",
                QMessageBox.Ok
            )
            self.selected_symbol = ""
            self.symbol_input.setText("")
            self.symbol_input.setFocus()
        else:
            QMessageBox.warning(
                self,
                "Brak symbolu",
                "Proszę wpisać lub wybrać symbol.",
                QMessageBox.Ok
            )
            self.selected_symbol = ""
            self.symbol_input.setText("")
            self.symbol_input.setFocus()

    def get_selected_symbol(self):
        """Zwraca wybrany symbol"""
        return self.selected_symbol


class ScheduleChangeDialog(QDialog):
    """Dialog do edycji zmian w grafiku"""

    def __init__(self, parent=None, grouped_cells=None, year=None, month=None):
        super().__init__(parent)
        self.setWindowTitle("Wstaw zmianę grafiku")
        self.setMinimumWidth(700)  # Zwiększona szerokość dla dodatkowej kolumny
        self.setMinimumHeight(500)  # Zwiększona wysokość dla większej liczby wierszy

        self.parent = parent
        self.grouped_cells = grouped_cells
        self.year = year
        self.month = month

        # Spłaszcz dane - wszystkie komórki w jednej liście
        self.flattened_cells = self.flatten_grouped_cells(grouped_cells)

        self.setup_ui()

    def flatten_grouped_cells(self, grouped_cells):
        """Spłaszcza pogrupowane komórki do jednej listy"""
        flattened = []
        for user_id, dates in grouped_cells.items():
            for date, cells in dates.items():
                for cell in cells:
                    flattened.append(cell)
        return flattened

    def setup_ui(self):
        main_layout = QVBoxLayout(self)

        # Nagłówek
        header_label = QLabel("Edycja zmian w grafiku")
        header_label.setStyleSheet("font-size: 14pt; font-weight: bold; margin-bottom: 10px;")
        main_layout.addWidget(header_label)

        # Tabela dla wszystkich komórek
        self.cells_table = QTableWidget()
        self.cells_table.setColumnCount(6)  # Data, Użytkownik, Symbol, Lokalizacja, Godzina rozpoczęcia, Akcje
        self.cells_table.setHorizontalHeaderLabels(
            ["Data", "Użytkownik", "Symbol", "Lokalizacja", "Godzina rozpoczęcia", "Akcje"])

        # Ustaw właściwości dla lepszego wyświetlania
        self.cells_table.horizontalHeader().setStretchLastSection(True)
        self.cells_table.horizontalHeader().setSectionResizeMode(0, QHeaderView.ResizeToContents)  # Data
        self.cells_table.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeToContents)  # Użytkownik
        self.cells_table.horizontalHeader().setSectionResizeMode(2, QHeaderView.ResizeToContents)  # Symbol
        self.cells_table.horizontalHeader().setSectionResizeMode(3, QHeaderView.ResizeToContents)  # Lokalizacja
        self.cells_table.horizontalHeader().setSectionResizeMode(4, QHeaderView.ResizeToContents)  # Godzina rozpoczęcia

        # Dodaj wiersze dla każdej komórki
        self.cells_table.setRowCount(len(self.flattened_cells))

        for row, cell in enumerate(self.flattened_cells):
            # Kolumna daty
            date_item = QTableWidgetItem(self.format_date(cell.get('date', '')))
            date_item.setFlags(date_item.flags() & ~Qt.ItemIsEditable)  # Tylko do odczytu
            self.cells_table.setItem(row, 0, date_item)

            # Kolumna użytkownika
            user_item = QTableWidgetItem(cell.get('user_name', 'Nieznany'))
            user_item.setFlags(user_item.flags() & ~Qt.ItemIsEditable)  # Tylko do odczytu
            self.cells_table.setItem(row, 1, user_item)

            # Kolumna symbolu
            current_symbol = cell.get('current_symbol', '')
            symbol_item = QTableWidgetItem(current_symbol)
            symbol_item.setFlags(symbol_item.flags() & ~Qt.ItemIsEditable)  # Tylko do odczytu
            self.cells_table.setItem(row, 2, symbol_item)

            # Kolumna lokalizacji (Combo box)
            location_combo = QComboBox()
            location_combo.addItem("SBC (s)", "s")
            location_combo.addItem("mPrzystanek (p)", "p")
            location_combo.addItem("HomeOffice (h)", "h")

            # Ustaw bieżącą lokalizację z symbolu, jeśli dostępna
            if current_symbol and ';' in current_symbol:
                parts = current_symbol.split(';')
                if parts[0] in ['s', 'p', 'h']:
                    location_index = {'s': 0, 'p': 1, 'h': 2}.get(parts[0], 0)
                    location_combo.setCurrentIndex(location_index)

            self.cells_table.setCellWidget(row, 3, location_combo)

            # Kolumna godziny rozpoczęcia (SpinBox)
            time_spin = QSpinBox()
            time_spin.setMinimum(0)
            time_spin.setMaximum(23)
            time_spin.setButtonSymbols(QSpinBox.UpDownArrows)  # Pokazuj przyciski góra/dół
            time_spin.setSpecialValueText("")  # Brak specjalnego tekstu dla wartości minimalnej

            # Ustaw bieżącą godzinę rozpoczęcia, jeśli dostępna
            start_hour = cell.get('start_hour')
            if start_hour is not None and isinstance(start_hour, int) and 0 <= start_hour < 24:
                time_spin.setValue(start_hour)
            else:
                time_spin.setValue(8)  # Domyślnie 8:00

            self.cells_table.setCellWidget(row, 4, time_spin)

            # Przycisk akcji
            apply_button = QPushButton("Zastosuj")
            apply_button.setStyleSheet("background-color: #2196F3; color: white;")

            # Zapisz oryginalny indeks komórki w danych przycisku
            apply_button.setProperty("cell_index", row)

            # Połącz przycisk z obsługą z danymi komórki - używając indeksu komórki
            apply_button.clicked.connect(self.apply_change_by_index)

            self.cells_table.setCellWidget(row, 5, apply_button)

        main_layout.addWidget(self.cells_table)

        # Dodaj przyciski na dole
        button_layout = QHBoxLayout()

        # Przycisk zamknięcia
        close_button = QPushButton("Zamknij")
        close_button.clicked.connect(self.close)

        button_layout.addStretch()
        button_layout.addWidget(close_button)

        main_layout.addLayout(button_layout)

    def apply_change_by_index(self):
        """Obsługuje kliknięcie przycisku 'Zastosuj' i stosuje zmianę dla wybranej komórki"""
        # Pobierz przycisk, który wywołał tę funkcję
        button = self.sender()
        if not button:
            return

        # Pobierz indeks komórki z właściwości przycisku
        cell_index = button.property("cell_index")
        if cell_index is None or cell_index >= len(self.flattened_cells):
            return

        # Pobierz dane komórki
        cell = self.flattened_cells[cell_index]

        # Pobierz wartości z kontrolek
        location_combo = self.cells_table.cellWidget(cell_index, 3)
        time_spin = self.cells_table.cellWidget(cell_index, 4)

        if not location_combo or not time_spin:
            QMessageBox.warning(self, "Błąd", "Nie można odczytać wartości.", QMessageBox.Ok)
            return

        location = location_combo.currentData()
        start_hour = time_spin.value()

        # Pobierz dane potrzebne do wywołania procedury
        user_id = cell.get('user_id')
        date_str = cell.get('date')
        nr_kadrowy = cell.get('nr_kadrowy')
        current_symbol = cell.get('current_symbol', '')

        # Przygotuj nowy symbol - ZMODYFIKOWANA LOGIKA
        # Podziel istniejący symbol, jeśli jest, aby zachować wartości po godzinie rozpoczęcia
        if current_symbol and ';' in current_symbol:
            parts = current_symbol.split(';')
            # Sprawdź ile części ma symbol
            if len(parts) >= 3:
                # Format: lokalizacja;godzina_rozpoczęcia;pozostałe_wartości;
                # Zamień lokalizację i godzinę rozpoczęcia, zachowując inne części
                new_symbol = f"{location};{start_hour};{';'.join(parts[2:])}"
            elif len(parts) == 2:
                # Format: lokalizacja;godzina_rozpoczęcia;
                new_symbol = f"{location};{start_hour};"
            else:
                # Format: tylko lokalizacja;
                new_symbol = f"{location};{start_hour};"
        else:
            # Jeśli nie ma istniejącego symbolu lub jest bez średnika, utwórz nowy
            new_symbol = f"{location};{start_hour};8;"  # Domyślna wartość 8 godzin pracy

        # Upewnij się, że symbol kończy się średnikiem
        if not new_symbol.endswith(';'):
            new_symbol += ';'

        # Wyodrębnij rok i miesiąc z daty
        year, month, _ = date_str.split('-')

        # Wywołaj procedurę, aby zastosować zmianę
        try:
            result = self.call_change_procedure(
                user_id,
                int(year),
                int(month),
                date_str,
                new_symbol,
                nr_kadrowy
            )

            if result["success"]:
                # Zaktualizuj tekst i styl przycisku, aby wskazać sukces
                button.setText("Zmieniono ✓")
                button.setStyleSheet("background-color: #4CAF50; color: white;")

                # Zaktualizuj element symbolu w tabeli
                symbol_item = self.cells_table.item(cell_index, 2)
                if symbol_item:
                    symbol_item.setText(new_symbol)

                # Odśwież dane w głównym oknie
                self.parent.data_provider.refresh_data(int(year), int(month))
                self.parent.update_table_content()
            else:
                QMessageBox.warning(self, "Błąd", result["message"], QMessageBox.Ok)

        except Exception as e:
            QMessageBox.critical(self, "Błąd", f"Wystąpił błąd: {str(e)}", QMessageBox.Ok)

    def format_date(self, date_str):
        """Formatuje ciąg daty z YYYY-MM-DD do DD.MM.YYYY"""
        try:
            year, month, day = date_str.split('-')
            return f"{day}.{month}.{year}"
        except:
            return date_str

    def call_change_procedure(self, user_id, year, month, date_str, symbol, nr_kadrowy, pobieranie_sugestii=None):
        """
        Wywołuje procedurę składowaną p_P_ZZ_ImportZmianNaSerwer_v4 aby zastosować zmianę w grafiku

        Args:
            user_id: ID użytkownika
            year: Rok
            month: Miesiąc
            date_str: Data w formacie 'YYYY-MM-DD'
            symbol: Nowy symbol, w tym lokalizacja
            nr_kadrowy: Numer kadrowy pracownika
            pobieranie_sugestii: Parametr NULL

        Returns:
            dict: Wynik operacji z kluczami 'success' i 'message'
        """
        try:
            # Przygotuj parametry dla procedury składowanej
            params = [
                nr_kadrowy,  # @Nr_Kadrowy
                year,  # @Rok
                month,  # @Miesiac
                date_str,  # @Data
                symbol,  # @Symbol
                pobieranie_sugestii  # @CzyPobieranieSugestii
            ]

            # Utwórz połączenie z bazą danych
            conn = DatabaseConnector.get_connection()
            cursor = conn.cursor()

            # Przygotuj wywołanie procedury składowanej
            placeholders = ", ".join(["?"] * len(params))
            sql = f"{{CALL [dbo].[p_P_ZZ_ImportZmianNaSerwer_v4] ({placeholders})}}"

            # Wykonaj procedurę składowaną
            cursor.execute(sql, params)

            # Pobierz wyniki
            result_sets = []

            # Procedura może zwrócić wiele zestawów wyników
            while True:
                try:
                    rows = cursor.fetchall()
                    if rows:
                        result_sets.append(rows)

                    # Sprawdź, czy są więcej zestawów wyników
                    if not cursor.nextset():
                        break
                except:
                    break

            # Domyślny komunikat
            success = False
            message = "Nieznany wynik operacji."

            # Sprawdź wyniki - zwykle pierwszy zestaw wyników zawiera informacje o sukcesie/niepowodzeniu
            if result_sets and result_sets[0]:
                first_result = result_sets[0][0]

                # Pobierz komunikat z wyniku
                message = str(first_result[0]) if first_result and len(first_result) > 0 else "Operacja zakończona."

                # Określ sukces na podstawie treści komunikatu
                success = not (
                            "błąd" in message.lower() or "nieudany" in message.lower() or "niepowodzenie" in message.lower())

            # Zatwierdź transakcję i zamknij połączenie
            conn.commit()
            conn.close()

            # Zaktualizuj datę ostatniej modyfikacji, jeśli zakończono sukcesem
            if success:
                try:
                    # Pobierz najnowszą datę modyfikacji
                    query = """
                        SELECT MAX(DataModyfikacji) as DataModyfikacji FROM p_v_zz_GrafikiPracy
                    """
                    conn = DatabaseConnector.get_connection()
                    cursor = conn.cursor()
                    cursor.execute(query)
                    result = cursor.fetchone()
                    conn.close()

                    if result and result[0]:
                        # Zapisz jako własną modyfikację
                        self.parent.last_self_modification_date = result[0]
                        self.parent.last_modification_date = result[0]
                        print(f"Zarejestrowano własną modyfikację z datą: {self.parent.last_self_modification_date}")
                except Exception as e:
                    print(f"Błąd rejestrowania własnej modyfikacji: {e}")

            return {
                "success": success,
                "message": message
            }

        except Exception as e:
            print(f"Błąd wywołania procedury zmiany: {e}")
            return {
                "success": False,
                "message": f"Wystąpił błąd: {str(e)}"
            }
