# compare_to_file.py
import json
import sys
from typing import Any

# Globalne listy do przechowywania zagregowanych różnic
g_added = []
g_changed = []
g_removed = []

def find_diff(data1: Any, data2: Any, path: str = "root"):
    """
    Rekursywna funkcja do porównywania danych, która kategoryzuje różnice.
    """
    if type(data1) is not type(data2):
        g_changed.append(
            f"Ścieżka '{path}': typ zmieniono z `{type(data1).__name__}` na `{type(data2).__name__}`"
        )
        return

    if isinstance(data1, dict):
        keys1, keys2 = set(data1.keys()), set(data2.keys())
        for key in keys2 - keys1:
            g_added.append(f"Klucz `{key}` w ścieżce '{path}'")
        for key in keys1 - keys2:
            g_removed.append(f"Klucz `{key}` w ścieżce '{path}'")
        for key in keys1.intersection(keys2):
            find_diff(data1[key], data2[key], path=f"{path}.{key}")

    elif isinstance(data1, list):
        list1_copy, list2_copy = list(data1), list(data2)
        for item1 in data1:
            try:
                list2_copy.remove(item1)
            except ValueError:
                g_removed.append(f"Element w liście '{path}': {json.dumps(item1, ensure_ascii=False)}")
        for item2 in list2_copy:
            g_added.append(f"Element w liście '{path}': {json.dumps(item2, ensure_ascii=False)}")

    else:
        if data1 != data2:
            val1, val2 = json.dumps(data1, ensure_ascii=False), json.dumps(data2, ensure_ascii=False)
            g_changed.append(f"Wartość w '{path}': z {val1} na {val2}")

def load_json_file(filepath: str) -> Any:
    """Wczytuje i dekoduje plik JSON, obsługując błędy."""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"BŁĄD: Nie znaleziono pliku: {filepath}")
        sys.exit(1)
    except json.JSONDecodeError as e:
        print(f"BŁĄD: Plik '{filepath}' nie jest poprawnym plikiem JSON. {e}")
        sys.exit(1)

def main():
    """Główna funkcja programu."""
    if len(sys.argv) != 4:
        print("Użycie: python compare_to_file.py <plik1.json> <plik2.json> <plik_wynikowy.txt>")
        sys.exit(1)

    file1_path, file2_path, output_path = sys.argv[1], sys.argv[2], sys.argv[3]

    json1 = load_json_file(file1_path)
    json2 = load_json_file(file2_path)

    find_diff(json1, json2)

    try:
        with open(output_path, 'w', encoding='utf-8') as f:
            print("--- Porównywanie plików JSON (Plik 1 -> Plik 2) ---", file=f)
            print(f"Plik bazowy (stary): {file1_path}", file=f)
            print(f"Plik do porównania (nowy): {file2_path}", file=f)
            print("-" * 50, file=f)
            f.write("\n")

            if not g_added and not g_changed and not g_removed:
                print("✅ Pliki są semantycznie identyczne.", file=f)
            else:
                print("🔥 Znaleziono różnice. Podsumowanie:\n", file=f)
                if g_added:
                    print("--- 🟢 DODANO W NOWYM PLIKU ---", file=f)
                    for item in g_added:
                        print(f"- {item}", file=f)
                    f.write("\n")
                if g_changed:
                    print("--- 🟡 ZMIENIONO ---", file=f)
                    for item in g_changed:
                        print(f"- {item}", file=f)
                    f.write("\n")
                if g_removed:
                    print("--- 🔴 USUNIĘTO (BRAKUJE W NOWYM PLIKU) ---", file=f)
                    for item in g_removed:
                        print(f"- {item}", file=f)
                    f.write("\n")
        
        print(f"✅ Wyniki porównania zostały zapisane do pliku: {output_path}")

    except IOError as e:
        print(f"BŁĄD: Nie można zapisać do pliku {output_path}. {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
