# app_settings.py
import json
from collections import defaultdict
from debug_utils import log_error

class AppSettings:
    """Globalny kontener na ustawienia i logikę biznesową ładowaną z bazy danych."""
    def __init__(self):
        self.REQUIRED_VERSION = '0.0.0'
        self.FORCE_UPDATE = False
        self.PERMISSIONS = defaultdict(set)
        self.SYMBOL_CATEGORIES = {}
        self.ABSENCE_SYMBOLS = set()
        self.GROUP_MAPPING = {}
        self.SHIFT_COLOR_MAP = {}
        self.SYMBOL_PERMISSIONS = {}
        self.WORK_LIKE_SYMBOLS = set()
        self.LOGGING_USERS_FILE = set()
        self.LOGGING_USERS_CONSOLE = set()

    def parse_and_apply(self, key, value):
        """Paruje i ustawia wartość dla danego klucza."""
        try:
            if key == 'current_version': self.REQUIRED_VERSION = value
            elif key == 'force_update': self.FORCE_UPDATE = value.lower() == 'true'
            elif key == 'AppPermissions':
                self.PERMISSIONS = defaultdict(set, {k: set(v) for k, v in json.loads(value).items()})
            elif key == 'SymbolCategoriesDialog': self.SYMBOL_CATEGORIES = json.loads(value)
            elif key == 'AbsenceSymbolsLogic': self.ABSENCE_SYMBOLS = set(json.loads(value))
            elif key == 'GroupMapping':
                self.GROUP_MAPPING = {k: set(v) for k,v in json.loads(value).items()}
            elif key == 'ShiftColorMap':
                self.SHIFT_COLOR_MAP = {int(k): v for k, v in json.loads(value).items()}
            elif key == 'SymbolPermissions':
                self.SYMBOL_PERMISSIONS = json.loads(value)
            elif key == 'WorkLikeSymbols':
                self.WORK_LIKE_SYMBOLS = set(json.loads(value))
            elif key == 'LoggingUserFile':
                # Tworzy zbiór małych liter z loginów, ignorując puste wpisy
                self.LOGGING_USERS_FILE = {user.strip().lower() for user in value.split(',') if user.strip()}
            elif key == 'LoggingUserConsole':
                self.LOGGING_USERS_CONSOLE = {user.strip().lower() for user in value.split(',') if user.strip()}

        except (json.JSONDecodeError, TypeError) as e:
            log_error(f"BŁĄD: Nie udało się sparsować ustawienia '{key}' z bazy danych. Błąd: {e}")

    def has_permission(self, role: str, feature_key: str) -> bool:
        if not role or not feature_key: return False
        allowed_roles = self.PERMISSIONS.get(feature_key)
        if allowed_roles is None: return False
        return role in allowed_roles

    # --- NOWA METODA ---
    def has_symbol_permission(self, role: str, symbol: str) -> bool:
        """Sprawdza, czy dana rola ma uprawnienia do użycia konkretnego symbolu."""
        if not role or not symbol:
            return False
        allowed_roles = self.SYMBOL_PERMISSIONS.get(symbol)
        # Jeśli dla symbolu nie zdefiniowano żadnych ról, domyślnie zablokuj dostęp.
        if allowed_roles is None:
            return False
        return role in allowed_roles
    # --- KONIEC NOWEJ METODY ---

    def get_absence_symbols(self) -> set:
        return self.ABSENCE_SYMBOLS

    def get_group_mapping(self) -> dict:
        return self.GROUP_MAPPING

app_settings = AppSettings()
