# fast_symbol_parser.py - SZYBKI ZAMIENNIK symbol_parser.py
"""
Szybki parser symboli grafiku - optymalizowany dla wydajności.
Obsługuje formaty:
- lokalizacja;godzina;liczba_godzin;symbol_specjalny
- lokalizacja;godzina;liczba_godzin;
- godzina;liczba_godzin;symbol_specjalny
- godzina;liczba_godzin;
"""

# Cache jako proste słowniki - szybsze niż lru_cache
_PARSE_CACHE = {}
_BUILD_CACHE = {}
_CACHE_SIZE_LIMIT = 5000  # Limit rozmiaru cache


def parse_symbol(symbol):
    """
    SZYBKI parser symboli - 3-5x szybszy niż poprzednia wersja.

    Args:
        symbol (str): Symbol do sparsowania

    Returns:
        dict: Komponenty symbolu
    """
    # Sprawdź cache
    if symbol in _PARSE_CACHE:
        return _PARSE_CACHE[symbol]

    # Domyślny wynik
    result = {
        'location': None,
        'start_hour': None,
        'work_hours': None,
        'special_symbol': None
    }

    # Szybkie sprawdzenie dla pustych symboli
    if not symbol or ';' not in symbol:
        _cache_result(_PARSE_CACHE, symbol, result)
        return result

    parts = symbol.split(';')
    parts_count = len(parts)

    try:
        # Sprawdź pierwszy element - czy to lokalizacja czy godzina
        first = parts[0]

        if first in ('h', 's', 'p'):
            # Format z lokalizacją: lokalizacja;godzina;liczba_godzin;[symbol_specjalny]
            result['location'] = first

            if parts_count > 1 and parts[1].isdigit():
                hour = int(parts[1])
                if 0 <= hour <= 23:
                    result['start_hour'] = hour

            if parts_count > 2 and parts[2].isdigit():
                hours = int(parts[2])
                if 1 <= hours <= 24:
                    result['work_hours'] = hours

            if parts_count > 3 and parts[3].strip():
                result['special_symbol'] = parts[3].strip()

        elif first.isdigit():
            # Format bez lokalizacji: godzina;liczba_godzin;[symbol_specjalny]
            hour = int(first)
            if 0 <= hour <= 23:
                result['start_hour'] = hour

            if parts_count > 1 and parts[1].isdigit():
                hours = int(parts[1])
                if 1 <= hours <= 24:
                    result['work_hours'] = hours

            if parts_count > 2 and parts[2].strip():
                result['special_symbol'] = parts[2].strip()

    except (ValueError, IndexError):
        # W przypadku błędu zwróć puste komponenty
        pass

    # Zapisz w cache
    _cache_result(_PARSE_CACHE, symbol, result)
    return result


def build_symbol(location=None, start_hour=None, work_hours=None, special_symbol=None):
    """
    SZYBKIE budowanie symbolu - 3-5x szybsze niż poprzednia wersja.

    Args:
        location (str|None): Lokalizacja (h, s, p)
        start_hour (int|None): Godzina rozpoczęcia (0-23)
        work_hours (int|None): Liczba godzin (1-24)
        special_symbol (str|None): Symbol specjalny

    Returns:
        str: Zbudowany symbol
    """
    # Klucz cache - tuple jest szybsze niż string dla kluczy cache
    cache_key = (location, start_hour, work_hours, special_symbol)

    if cache_key in _BUILD_CACHE:
        return _BUILD_CACHE[cache_key]

    parts = []

    # Sprawdź czy mamy lokalizację
    if location and location in ('h', 's', 'p'):
        parts.append(location)

        # Z lokalizacją zawsze dodajemy godzinę i liczbę godzin (nawet jeśli None)
        parts.append(str(start_hour) if start_hour is not None and 0 <= start_hour <= 23 else '')
        parts.append(str(work_hours) if work_hours is not None and 1 <= work_hours <= 24 else '')

        # Symbol specjalny na końcu
        if special_symbol and special_symbol.strip():
            parts.append(special_symbol.strip())
    else:
        # Bez lokalizacji - tylko jeśli mamy godzinę
        if start_hour is not None and 0 <= start_hour <= 23:
            parts.append(str(start_hour))

            # Liczba godzin
            if work_hours is not None and 1 <= work_hours <= 24:
                parts.append(str(work_hours))
            else:
                parts.append('')  # Puste miejsce dla godzin

            # Symbol specjalny
            if special_symbol and special_symbol.strip():
                parts.append(special_symbol.strip())

    result = ';'.join(parts) if parts else ''

    # Zapisz w cache
    _cache_result(_BUILD_CACHE, cache_key, result)
    return result


def _cache_result(cache_dict, key, value):
    """Szybkie cachowanie z automatycznym czyszczeniem gdy za duży."""
    if len(cache_dict) >= _CACHE_SIZE_LIMIT:
        # Wyczyść 25% najstarszych wpisów (FIFO)
        items_to_remove = _CACHE_SIZE_LIMIT // 4
        keys_to_remove = list(cache_dict.keys())[:items_to_remove]
        for k in keys_to_remove:
            del cache_dict[k]

    cache_dict[key] = value


def clear_cache():
    """Czyści cache - użyj przy problemach z pamięcią."""
    global _PARSE_CACHE, _BUILD_CACHE
    _PARSE_CACHE.clear()
    _BUILD_CACHE.clear()


def get_cache_stats():
    """Zwraca statystyki cache."""
    return {
        'parse_cache_size': len(_PARSE_CACHE),
        'build_cache_size': len(_BUILD_CACHE),
        'total_cached_items': len(_PARSE_CACHE) + len(_BUILD_CACHE)
    }


# DODATKOWE FUNKCJE POMOCNICZE

def extract_location(symbol):
    """SZYBKO wyciąga tylko lokalizację z symbolu."""
    if not symbol or ';' not in symbol:
        return None
    first = symbol.split(';', 1)[0]
    return first if first in ('h', 's', 'p') else None


def extract_hours(symbol):
    """SZYBKO wyciąga godziny z symbolu."""
    if not symbol or ';' not in symbol:
        return None, None

    parts = symbol.split(';')

    try:
        if parts[0] in ('h', 's', 'p'):
            # Z lokalizacją
            start_hour = int(parts[1]) if len(parts) > 1 and parts[1].isdigit() else None
            work_hours = int(parts[2]) if len(parts) > 2 and parts[2].isdigit() else None
        else:
            # Bez lokalizacji
            start_hour = int(parts[0]) if parts[0].isdigit() else None
            work_hours = int(parts[1]) if len(parts) > 1 and parts[1].isdigit() else None

        return start_hour, work_hours
    except (ValueError, IndexError):
        return None, None


def add_absence_to_symbol(symbol, absence_symbol, default_location='h'):
    """
    SZYBKA FUNKCJA: Dodaje nieobecność do istniejącego symbolu.

    Args:
        symbol (str): Istniejący symbol
        absence_symbol (str): Symbol nieobecności (np. 'CO', 'UZ')
        default_location (str): Domyślna lokalizacja jeśli brak

    Returns:
        str: Symbol z dodaną nieobecnością
    """
    if not symbol or symbol.strip() == '':
        return absence_symbol

    # Parsuj istniejący symbol
    parsed = parse_symbol(symbol)

    # Zachowaj lokalizację, godziny, ale zamień symbol specjalny
    return build_symbol(
        location=parsed['location'] or default_location,
        start_hour=parsed['start_hour'],
        work_hours=parsed['work_hours'],
        special_symbol=absence_symbol
    )


def change_location_in_symbol(symbol, new_location):
    """SZYBKO zmienia lokalizację w symbolu."""
    if new_location not in ('h', 's', 'p'):
        return symbol

    parsed = parse_symbol(symbol)
    return build_symbol(
        location=new_location,
        start_hour=parsed['start_hour'],
        work_hours=parsed['work_hours'],
        special_symbol=parsed['special_symbol']
    )


# BATCH PROCESSING dla dużych zbiorów danych

def parse_symbols_batch(symbols_list):
    """
    SZYBKIE przetwarzanie wielu symboli naraz.

    Args:
        symbols_list (list): Lista symboli

    Returns:
        dict: {symbol: parsed_components}
    """
    result = {}
    for symbol in symbols_list:
        if symbol:  # Tylko niepuste symbole
            result[symbol] = parse_symbol(symbol)
    return result


def build_symbols_batch(symbols_specs):
    """
    SZYBKIE budowanie wielu symboli naraz.

    Args:
        symbols_specs (list): Lista tuple (location, start_hour, work_hours, special_symbol)

    Returns:
        list: Lista zbudowanych symboli
    """
    return [build_symbol(*spec) for spec in symbols_specs]


# KOMPATYBILNOŚĆ z poprzednią wersją

def get_symbol_description(symbol):
    """Kompatybilność - prosty opis symbolu."""
    parsed = parse_symbol(symbol)

    parts = []
    if parsed['location']:
        loc_map = {'h': 'Home Office', 's': 'SBC', 'p': 'mPrzystanek'}
        parts.append(loc_map.get(parsed['location'], parsed['location']))

    if parsed['start_hour'] is not None:
        parts.append(f"Start: {parsed['start_hour']:02d}:00")

    if parsed['work_hours'] is not None:
        parts.append(f"Godzin: {parsed['work_hours']}")

    if parsed['special_symbol']:
        parts.append(f"Symbol: {parsed['special_symbol']}")

    return ', '.join(parts) if parts else 'Pusty symbol'


# WALIDACJA - szybkie funkcje sprawdzające

def is_valid_symbol(symbol):
    """Szybka walidacja symbolu."""
    if not symbol:
        return False
    parsed = parse_symbol(symbol)
    return any(parsed.values())  # Czy ma jakiekolwiek komponenty


def validate_symbol_components(location=None, start_hour=None, work_hours=None):
    """Szybka walidacja komponentów."""
    if location and location not in ('h', 's', 'p'):
        return False
    if start_hour is not None and not (0 <= start_hour <= 23):
        return False
    if work_hours is not None and not (1 <= work_hours <= 24):
        return False
    return True
