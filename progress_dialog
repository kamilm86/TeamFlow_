# progress_dialog.py - POPRAWIONA WERSJA

from PySide6.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QLabel,
                               QPushButton, QProgressBar, QTextEdit)
from PySide6.QtCore import Qt, Signal, QThread, QTimer, QMutex, QMutexLocker
from PySide6.QtGui import QMovie, QPixmap, QPainter, QTextCursor # Usunięto QFont
from debug_utils import debug_print, log_error
import time # Usunięto sys


class DataLoadingThread(QThread):
    """
    Thread do asynchronicznego ładowania danych z progress reporting
    """
    # Sygnały dla komunikacji z UI
    progress_updated = Signal(int)  # Progress 0-100
    status_updated = Signal(str)  # Status message
    data_loaded = Signal(object)  # Załadowane dane
    error_occurred = Signal(str)  # Błąd

    def __init__(self, data_provider, year, month, parent=None):
        super().__init__(parent)
        self.data_provider = data_provider
        self.year = year
        self.month = month
        self.cancel_requested = False
        self.mutex = QMutex()

    def run(self):
        """Główna metoda wątku ładującego dane"""
        try:
            debug_print(f"DataLoadingThread: Rozpoczynam async ładowanie danych dla {self.year}-{self.month}")
            self.status_updated.emit("Przygotowywanie do ładowania...")
            self.progress_updated.emit(5)

            if self._check_cancel(): return

            # Krok 1: Wymuś załadowanie świeżych danych i utworzenie/aktualizację kontenera w DataProviderV2
            # Ta metoda powinna obsłużyć pobranie z DB, podstawowe przetworzenie i zapis do cache DataProvidera.
            self.status_updated.emit("Pobieranie i podstawowe przetwarzanie danych...")
            self.progress_updated.emit(10)

            # _get_or_load_monthly_data z use_cache=False zapewni świeże dane i utworzenie kontenera
            # To jest główny moment ładowania danych z bazy i ich podstawowego przetwarzania.
            container = self.data_provider._get_or_load_monthly_data(self.year, self.month, use_cache=False)

            if self._check_cancel(): return
            self.progress_updated.emit(70)  # Znaczna część pracy wykonana

            if not container:
                error_msg = f"Nie udało się załadować kontenera danych dla {self.year}-{self.month}"
                self.error_occurred.emit(error_msg)
                return

            self.status_updated.emit("Przygotowywanie danych do wyświetlenia (ikony)...")
            # Krok 2: Pobierz dane przetworzone (z ikonami) z DataProvidera.
            # Ta metoda (get_processed_data) użyje już załadowanego kontenera i nałoży ikony.
            # To powinno być teraz znacznie szybsze, bo bazowe dane już są.
            processed_data_with_icons = self.data_provider.get_processed_data(self.year, self.month)

            if self._check_cancel(): return
            self.progress_updated.emit(90)

            # Przygotuj dane do zwrócenia
            result_data = {
                'schedule_data': container.schedule_data,
                'events_data': container.events_data,
                'processed_data': processed_data_with_icons,  # To już powinno mieć ikony
                'year': self.year,
                'month': self.month
            }

            self.progress_updated.emit(100)
            self.status_updated.emit("Zakończono!")
            self.msleep(200)  # Małe opóźnienie

            self.data_loaded.emit(result_data)
            debug_print(f"DataLoadingThread: Async ładowanie zakończone dla {self.year}-{self.month}")

        except Exception as e:
            error_msg = f"DataLoadingThread: Błąd podczas ładowania danych: {str(e)}"
            log_error(error_msg, exception=e)  # Dodano logowanie pełnego wyjątku
            self.error_occurred.emit(error_msg)

    def _check_cancel(self):
        """Sprawdza czy użytkownik anulował operację"""
        with QMutexLocker(self.mutex):  # Zapewnia bezpieczeństwo wątkowe
            if self.cancel_requested:
                debug_print("DataLoadingThread: Ładowanie danych zostało anulowane")
                self.status_updated.emit("Anulowano ładowanie.")
                return True
        return False

    def cancel_loading(self):
        """Anuluje ładowanie danych"""
        with QMutexLocker(self.mutex):
            self.cancel_requested = True
        debug_print("DataLoadingThread: Zażądano anulowania ładowania danych")


class LoadingProgressDialog(QDialog):
    """
    Dialog z progress bar dla async ładowania danych
    """
    # Sygnały
    loading_completed = Signal(object)  # Dane załadowane
    loading_cancelled = Signal()  # Anulowano
    loading_failed = Signal(str)  # Błąd

    def __init__(self, parent=None, data_provider=None, year=None, month=None):
        super().__init__(parent)
        self.data_provider = data_provider
        self.year = year
        self.month = month
        self.loading_thread = None
        self.parent_widget = parent  # Zapisz referencję do rodzica

        self.setWindowTitle(f"Ładowanie danych {year}-{month:02d}")
        self.setModal(True)
        self.setFixedSize(400, 200)  # Domyślny rozmiar

        # Nie pozwalaj na zamknięcie przez X
        self.setWindowFlags(Qt.Dialog | Qt.CustomizeWindowHint | Qt.WindowTitleHint)

        self.apply_dialog_theme()
        self.setup_ui()
        # self.start_loading() # Przeniesiono start do exec() lub show()

    def apply_dialog_theme(self):
        """Stosuje motyw dla dialogu"""
        # Sprawdź czy rodzic istnieje i ma atrybut is_dark_theme
        if self.parent_widget and hasattr(self.parent_widget, 'is_dark_theme'):
            theme = "dark" if self.parent_widget.is_dark_theme else "light"
        else:  # Domyślny motyw, jeśli rodzic nie jest dostępny lub nie ma informacji o motywie
            theme = "dark"

        from styles import AppStyles  # Import wewnątrz metody, aby uniknąć problemów z kolejnością importu
        self.setStyleSheet(AppStyles.get_dialog_style(theme))

    def setup_ui(self):
        """Inicjalizuje interfejs użytkownika"""
        layout = QVBoxLayout(self)
        layout.setSpacing(15)

        # Tytuł
        title_label = QLabel(f"Ładowanie danych dla {self.year}-{self.month:02d}")
        title_label.setStyleSheet("font-weight: bold; font-size: 14px;")  # Usunięto color, dziedziczy z dialogu
        title_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(title_label)

        # Status
        self.status_label = QLabel("Przygotowywanie...")
        self.status_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.status_label)

        # Progress bar
        self.progress_bar = QProgressBar()
        self.progress_bar.setRange(0, 100)
        self.progress_bar.setValue(0)
        # Styl progress bara może być bardziej zależny od motywu, ale ten jest OK
        self.progress_bar.setStyleSheet("""
            QProgressBar {
                border: 2px solid grey;
                border-radius: 5px;
                text-align: center;
            }
            QProgressBar::chunk {
                background-color: #3498db; /* Jasnoniebieski, może wymagać dostosowania do motywu */
                border-radius: 3px;
            }
        """)
        layout.addWidget(self.progress_bar)

        # Szczegółowy log (opcjonalny)
        self.details_text = QTextEdit()
        self.details_text.setReadOnly(True)  # Powinien być tylko do odczytu
        self.details_text.setMaximumHeight(80)  # Zwiększono nieco wysokość
        self.details_text.setVisible(False)  # Domyślnie ukryty
        layout.addWidget(self.details_text)

        # Przyciski
        buttons_layout = QHBoxLayout()
        self.details_button = QPushButton("Pokaż szczegóły")
        self.details_button.clicked.connect(self.toggle_details)
        self.cancel_button = QPushButton("Anuluj")
        self.cancel_button.clicked.connect(self.cancel_loading)

        # Zastosuj style przycisków z AppStyles
        theme = "dark"  # Domyślny
        if self.parent_widget and hasattr(self.parent_widget, 'is_dark_theme'):
            theme = "dark" if self.parent_widget.is_dark_theme else "light"

        from styles import AppStyles  # Import wewnątrz metody
        button_style = AppStyles.get_button_style(theme)
        self.details_button.setStyleSheet(button_style)
        self.cancel_button.setStyleSheet(button_style)

        buttons_layout.addWidget(self.details_button)
        buttons_layout.addStretch()
        buttons_layout.addWidget(self.cancel_button)
        layout.addLayout(buttons_layout)

    def start_loading(self):
        """Rozpoczyna asynchroniczne ładowanie danych"""
        if not self.data_provider:
            log_error("LoadingProgressDialog: Brak DataProvider do rozpoczęcia ładowania.")
            self.loading_failed.emit("Krytyczny błąd: Brak dostawcy danych.")
            self.reject()  # Zamknij dialog, jeśli nie można rozpocząć
            return

        # Utwórz i uruchom wątek ładujący
        self.loading_thread = DataLoadingThread(
            self.data_provider, self.year, self.month, self  # Przekaż self jako rodzica wątku
        )

        # Podłącz sygnały
        self.loading_thread.progress_updated.connect(self.update_progress)
        self.loading_thread.status_updated.connect(self.update_status)
        self.loading_thread.data_loaded.connect(self.on_data_loaded)
        self.loading_thread.error_occurred.connect(self.on_error_occurred)
        self.loading_thread.finished.connect(self.on_thread_finished)  # Ważne do sprzątania

        # Uruchom wątek
        self.loading_thread.start()
        debug_print("LoadingProgressDialog: Uruchomiono wątek ładowania danych.")

    # Dodajemy metody exec() i open() aby start_loading było wywoływane we właściwym momencie
    def exec(self):
        self.start_loading()
        return super().exec()

    def open(self):
        self.start_loading()
        super().open()

    def update_progress(self, value):
        """Aktualizuje progress bar"""
        self.progress_bar.setValue(value)
        self.details_text.append(f"[{time.strftime('%H:%M:%S')}] Postęp: {value}%")
        self.details_text.moveCursor(QTextCursor.MoveOperation.End)

    def update_status(self, status):
        """Aktualizuje status"""
        self.status_label.setText(status)
        self.details_text.append(f"[{time.strftime('%H:%M:%S')}] Status: {status}")
        self.details_text.moveCursor(QTextCursor.MoveOperation.End)

    def on_data_loaded(self, data):
        """Obsługuje pomyślne załadowanie danych"""
        debug_print("LoadingProgressDialog: Dane zostały załadowane pomyślnie.")
        self.loading_completed.emit(data)
        QTimer.singleShot(300, self.accept)  # Krótsze opóźnienie

    def on_error_occurred(self, error_message):
        """Obsługuje błędy podczas ładowania"""
        log_error(f"LoadingProgressDialog: Wystąpił błąd podczas ładowania - {error_message}")
        self.status_label.setText(f"Błąd: {error_message[:50]}...")  # Skrócony komunikat
        self.progress_bar.setStyleSheet(
            self.progress_bar.styleSheet().replace("#3498db", "#e74c3c"))  # Zmień kolor na czerwony

        self.loading_failed.emit(error_message)  # Emituj sygnał błędu

        self.cancel_button.setText("Zamknij")
        # Bezpieczne rozłączanie sygnału, jeśli istnieje
        try:
            self.cancel_button.clicked.disconnect(self.cancel_loading)
        except RuntimeError:  # Jeśli sygnał nie był podłączony
            pass
        self.cancel_button.clicked.connect(self.reject)
        self.cancel_button.setEnabled(True)  # Upewnij się, że przycisk jest aktywny

    def on_thread_finished(self):
        """Obsługuje zakończenie wątku"""
        debug_print("LoadingProgressDialog: Wątek ładowania zakończył działanie.")
        # Nie usuwaj wątku tutaj, jeśli dialog jest wciąż aktywny
        # Wątek sam się usunie, gdy jego rodzic (dialog) zostanie usunięty,
        # lub można go usunąć w closeEvent/reject dialogu.
        # Dla bezpieczeństwa, jeśli wątek zakończył się, a dialog wciąż istnieje:
        if self.loading_thread:
            if not self.loading_thread.isRunning():  # Dodatkowe sprawdzenie
                self.loading_thread.deleteLater()  # Zaplanuj usunięcie
                self.loading_thread = None

    def cancel_loading(self):
        """Anuluje ładowanie danych"""
        debug_print("LoadingProgressDialog: Próba anulowania ładowania.")
        if self.loading_thread and self.loading_thread.isRunning():
            self.status_label.setText("Anulowanie...")
            self.cancel_button.setEnabled(False)
            self.loading_thread.cancel_loading()
            # Nie czekaj tutaj na zakończenie wątku, pozwól mu zakończyć się asynchronicznie.
            # Sygnał finished z wątku obsłuży resztę.
            # Jeśli wątek nie zakończy się sam, może to oznaczać problem w logice anulowania wątku.
        else:  # Jeśli wątek nie działa, po prostu zamknij dialog
            self.loading_cancelled.emit()  # Emituj sygnał, że anulowano (lub nie było co anulować)
            self.reject()

    def toggle_details(self):
        """Pokazuje/ukrywa szczegółowy log"""
        if self.details_text.isVisible():
            self.details_text.hide()
            self.details_button.setText("Pokaż szczegóły")
            self.setFixedSize(400, 200)  # Przywróć mniejszy rozmiar
        else:
            self.details_text.show()
            self.details_button.setText("Ukryj szczegóły")
            self.setFixedSize(400, 300)  # Zwiększ rozmiar dla logu

    def closeEvent(self, event):
        """Obsługuje próbę zamknięcia dialogu"""
        if self.loading_thread and self.loading_thread.isRunning():
            debug_print("LoadingProgressDialog: Zablokowano próbę zamknięcia podczas ładowania.")
            event.ignore()
            # Można dodać QMessageBox informujący użytkownika
        else:
            debug_print("LoadingProgressDialog: Dialog zamykany.")
            if self.loading_thread:  # Jeśli wątek istnieje, ale nie działa
                self.loading_thread.deleteLater()
                self.loading_thread = None
            event.accept()


# NOWE: Pomocnicza funkcja do użycia w main.py
def show_loading_dialog_async(parent, data_provider, year, month, callback=None):
    """
    Pokazuje dialog ładowania i wywołuje callback po zakończeniu

    Args:
        parent: Widget rodzica
        data_provider: DataProvider do ładowania danych
        year: Rok
        month: Miesiąc
        callback: Funkcja wywoływana po zakończeniu (data) -> None

    Returns:
        LoadingProgressDialog: Instancja dialogu
    """
    dialog = LoadingProgressDialog(parent, data_provider, year, month)

    if callback:
        dialog.loading_completed.connect(callback)

    return dialog
