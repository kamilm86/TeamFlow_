# settings_dialog.py (poprawiona wersja)

from PySide6.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QLabel,
                               QPushButton, QComboBox, QGroupBox, QRadioButton,
                               QFontComboBox, QSpinBox, QCheckBox, QGridLayout, QFormLayout)
from PySide6.QtCore import Qt, Signal
from PySide6.QtGui import QFont
from styles import AppStyles


class AppSettingsDialog(QDialog):
    """Dialog do konfiguracji ustawień aplikacji, w tym motywu i importu."""
    live_theme_changed = Signal(str, str, int)

    def __init__(self, parent=None, settings=None):
        super().__init__(parent)
        self.parent_widget = parent
        self.current_settings = settings if settings else {}

        self.setWindowTitle("Ustawienia")
        self.setMinimumWidth(450)

        self.setup_ui()
        self.apply_dialog_theme()
        self.connect_signals()

    def setup_ui(self):
        """Tworzy i układa wszystkie elementy interfejsu w dialogu."""
        main_layout = QVBoxLayout(self)

        theme_group = self._create_theme_group()
        import_group = self._create_import_group()
        display_options_group = self._create_display_options_group()

        self.save_settings_checkbox = QCheckBox("Zapamiętaj ustawienia na stałe")
        self.save_settings_checkbox.setChecked(True)

        buttons_layout = QHBoxLayout()
        self.ok_button = QPushButton("OK")
        self.cancel_button = QPushButton("Anuluj")
        buttons_layout.addStretch()
        buttons_layout.addWidget(self.ok_button)
        buttons_layout.addWidget(self.cancel_button)

        main_layout.addWidget(theme_group)
        main_layout.addWidget(import_group)
        main_layout.addWidget(display_options_group)
        main_layout.addLayout(buttons_layout)
        main_layout.addWidget(self.save_settings_checkbox, 0, Qt.AlignRight)

        self._load_settings_to_widgets()


    def _create_theme_group(self):
        """Tworzy grupę kontrolek do zmiany motywu i czcionki."""
        group = QGroupBox("Wygląd i motyw")
        layout = QGridLayout()

        self.dark_theme_radio = QRadioButton("Ciemny")
        self.light_theme_radio = QRadioButton("Jasny")
        layout.addWidget(self.dark_theme_radio, 0, 0)
        layout.addWidget(self.light_theme_radio, 0, 1)

        self.font_combo = QComboBox()
        preferred_fonts = ["Segoe UI", "Calibri", "Arial", "Tahoma", "Verdana", "Trebuchet MS"]
        self.font_combo.addItems(preferred_fonts)
        layout.addWidget(QLabel("Czcionka:"), 1, 0)
        layout.addWidget(self.font_combo, 1, 1)

        self.font_size_spin = QSpinBox()
        # --- ZMIANA: Rozszerzenie zakresu rozmiaru czcionki ---
        self.font_size_spin.setRange(7, 12)
        layout.addWidget(QLabel("Rozmiar:"), 2, 0)
        layout.addWidget(self.font_size_spin, 2, 1)

        group.setLayout(layout)
        return group

    def _create_import_group(self):
        """Tworzy grupę kontrolek dla parametrów importu grafiku."""
        group = QGroupBox("Ustawienia Importu Grafiku")
        layout = QFormLayout()

        self.grupa_combo = QComboBox()
        self.grupa_combo.addItem("INBOUND", 1)
        self.grupa_combo.addItem("OUTBOUND", 2)
        self.grupa_combo.addItem("WSZYSCY", 3)

        self.funkcja_combo = QComboBox()
        self.funkcja_combo.addItem("wszyscy", 1)
        self.funkcja_combo.addItem("tylko konsultanci", 2)
        self.funkcja_combo.addItem("tylko koordynatorzy", 3)
        self.funkcja_combo.addItem("grupa WZK2h", 4)
        self.funkcja_combo.addItem("cały DBZ", 5)
        self.funkcja_combo.addItem("inne wydziały wsparcia", 6)

        layout.addRow("Importuj grupę:", self.grupa_combo)
        layout.addRow("Importuj funkcję:", self.funkcja_combo)
        group.setLayout(layout)
        return group

    def _create_display_options_group(self):
        """Tworzy grupę kontrolek do konfiguracji wyglądu ikon w grafiku."""
        group = QGroupBox("Wygląd ikon w komórkach grafiku")
        layout = QFormLayout()
        layout.setFieldGrowthPolicy(QFormLayout.ExpandingFieldsGrow)

        self.show_special_symbol_check = QCheckBox("Pokaż symbol specjalny (np. U, CO)")
        self.special_symbol_pos_combo = QComboBox()
        # ZMIANA: Nowe opcje pozycji
        self.special_symbol_pos_combo.addItems(["Lewy górny róg", "Prawy górny róg"])

        self.show_location_symbol_check = QCheckBox("Pokaż symbol lokalizacji (np. h, s)")
        self.location_symbol_pos_combo = QComboBox()
        # ZMIANA: Nowe opcje pozycji
        self.location_symbol_pos_combo.addItems(["Lewy górny róg", "Prawy górny róg"])

        layout.addRow(self.show_special_symbol_check)
        layout.addRow("Pozycja symbolu specjalnego:", self.special_symbol_pos_combo)
        layout.addRow(self.show_location_symbol_check)
        layout.addRow("Pozycja symbolu lokalizacji:", self.location_symbol_pos_combo)

        group.setLayout(layout)
        return group

    def _load_settings_to_widgets(self):
        """Wczytuje zapisane ustawienia i ustawia stan kontrolek w UI."""
        # Motyw i czcionka
        if self.current_settings.get('theme', 'dark') == 'dark':
            self.dark_theme_radio.setChecked(True)
        else:
            self.light_theme_radio.setChecked(True)

        # Domyślną czcionką jest teraz 'Segoe UI', standardowa dla nowoczesnych interfejsów
        default_font = self.current_settings.get('font_family', 'Segoe UI')
        self.font_combo.setCurrentText(default_font)

        self.font_size_spin.setValue(self.current_settings.get('font_size', 9))

        # Ustawienia importu
        index_g = self.grupa_combo.findData(self.current_settings.get('import_grupa', 3))
        if index_g != -1: self.grupa_combo.setCurrentIndex(index_g)

        index_f = self.funkcja_combo.findData(self.current_settings.get('import_funkcja', 1))
        if index_f != -1: self.funkcja_combo.setCurrentIndex(index_f)

        # Ustawienia wyglądu ikon
        self.show_special_symbol_check.setChecked(self.current_settings.get('show_special_symbol', True))
        self.show_location_symbol_check.setChecked(self.current_settings.get('show_location_symbol', True))

        special_pos = self.current_settings.get('special_symbol_position', 'top_left')
        self.special_symbol_pos_combo.setCurrentIndex(1 if special_pos == 'top_right' else 0)

        location_pos = self.current_settings.get('location_symbol_position', 'top_right')
        self.location_symbol_pos_combo.setCurrentIndex(1 if location_pos == 'top_right' else 0)

    def get_current_settings(self):
        """Zbiera wszystkie ustawienia z dialogu i zwraca jako słownik."""
        font_family = self.font_combo.currentText()
        return {
            'theme': 'dark' if self.dark_theme_radio.isChecked() else 'light',
            'font_family': font_family,
            'font_size': self.font_size_spin.value(),
            'import_grupa': self.grupa_combo.currentData(),
            'import_funkcja': self.funkcja_combo.currentData(),
            'save_to_db': self.save_settings_checkbox.isChecked(),
            'show_special_symbol': self.show_special_symbol_check.isChecked(),
            'show_location_symbol': self.show_location_symbol_check.isChecked(),
            'special_symbol_position': 'top_right' if self.special_symbol_pos_combo.currentIndex() == 1 else 'top_left',
            'location_symbol_position': 'top_right' if self.location_symbol_pos_combo.currentIndex() == 1 else 'top_left'
        }

    def connect_signals(self):
        """Łączy sygnały kontrolek z odpowiednimi metodami."""
        self.ok_button.clicked.connect(self.accept)
        self.cancel_button.clicked.connect(self.reject)

        self.dark_theme_radio.toggled.connect(self._emit_live_preview_changes)
        self.font_combo.currentTextChanged.connect(self._emit_live_preview_changes)
        self.font_size_spin.valueChanged.connect(self._emit_live_preview_changes)

    def _emit_live_preview_changes(self):
        """Emituje sygnał ze zmianami motywu, aby główne okno mogło je pokazać na żywo."""
        selected_theme = 'dark' if self.dark_theme_radio.isChecked() else 'light'
        font_family = self.font_combo.currentText()
        font_size = self.font_size_spin.value()

        self.live_theme_changed.emit(selected_theme, font_family, font_size)
        self.apply_dialog_theme()

    def apply_dialog_theme(self):
        """Stosuje motyw dla samego okna dialogowego."""
        theme_to_apply = 'dark' if self.dark_theme_radio.isChecked() else 'light'
        self.setStyleSheet(AppStyles.get_dialog_style(theme_to_apply))
        button_style = AppStyles.get_button_style(theme_to_apply)
        for button in self.findChildren(QPushButton):
            button.setStyleSheet(button_style)
        checkbox_style = AppStyles.get_checkbox_style(theme_to_apply)
        for checkbox in self.findChildren(QCheckBox):
            checkbox.setStyleSheet(checkbox_style)
        combobox_style = AppStyles.get_combobox_style(theme_to_apply)
        for combo in self.findChildren(QComboBox):
            combo.setStyleSheet(combobox_style)
        for spinbox in self.findChildren(QSpinBox):
            spinbox.setStyleSheet(AppStyles.get_line_edit_style(theme_to_apply))
