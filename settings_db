# -*- coding: utf-8 -*-
from db_connector import DatabaseConnector
import getpass
import json  # Import do obsługi JSON
from debug_utils import debug_print, log_warning, log_error
from config import SQL_OBJECTS


class SettingsDatabase:
    """Klasa do obsugi bazy danych ustawień użytkownika w formacie JSON."""

    def get_current_login_windows(self):
        try:
            return getpass.getuser()
        except Exception:
            return 'unknown_user'

    def save_settings(self, settings_dict: dict, login_windows: str = None):
        """Zapisuje cały słownik ustawień jako JSON do bazy danych."""
        if login_windows is None:
            login_windows = self.get_current_login_windows()

        try:
            # Serializuj słownik do stringa JSON
            settings_json = json.dumps(settings_dict, indent=4)

            conn = DatabaseConnector.get_connection()
            cursor = conn.cursor()

            # Wywołaj nową, uproszczoną procedurę
            sql_query = f"EXEC {SQL_OBJECTS['p_saveusersettingsjson']} @login_windows=?, @settings_json=?"
            cursor.execute(sql_query, (login_windows, settings_json))
            conn.commit()
            conn.close()
            debug_print(f"Ustawienia JSON zapisane dla {login_windows}")
            return True
        except Exception as e:
            log_error(f"Błąd podczas zapisywania ustawień JSON: {e}", exception=e)
            return False

    def load_settings(self, login_windows: str = None) -> dict:
        """Ładuje ustawienia z JSON i łączy je z domyślnymi wartościami."""
        if login_windows is None:
            login_windows = self.get_current_login_windows()

        # Domyślne ustawienia, które zapewnią, że aplikacja zawsze ma potrzebne klucze
        defaults = {
            'theme': 'dark', 'font_family': 'Segoe UI', 'font_size': 9,
            'visible_columns': ['wydzial', 'przelozony_nazwisko_imie', 'uzytkownik_dane'],
            'show_schedule_comment': False, 'import_grupa': 3, 'import_funkcja': 1,
            'is_maximized': True, 'window_size': (1600, 800),
            'column_widths': {}, 'last_filters': {},  'sort_preferences': [],
            'outlook_template_path': ''
        }

        try:
            conn = DatabaseConnector.get_connection()
            cursor = conn.cursor()
            # Proste zapytanie do odczytu pola JSON
            cursor.execute(f"SELECT SettingsJSON FROM {SQL_OBJECTS['usersettings']} WHERE LoginWindows=?",
                           (login_windows,))
            result = cursor.fetchone()
            conn.close()

            if result and result[0]:
                # Deserializuj JSON i zaktualizuj domyślne wartości
                loaded_settings = json.loads(result[0])
                defaults.update(loaded_settings)

            return defaults
        except Exception as e:
            log_error(f"Błąd podczas ładowania ustawień JSON dla '{login_windows}'. Używam ustawień domyślnych.",
                      exception=e)
            return defaults
