from PySide6.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QLabel, QPushButton,
                               QListWidget, QListWidgetItem, QAbstractItemView, QCheckBox, QFrame)
from PySide6.QtCore import Qt
from styles import AppStyles


class ColumnSelectDialog(QDialog):
    """Dialog do wyboru kolumn widocznych w tabeli pracowników."""

    def __init__(self, parent=None, available_columns=None, visible_columns=None,
                 default_columns=None, user_role=None, is_comment_column_checked=False):
        super().__init__(parent)
        self.parent_widget = parent

        self.setWindowTitle("Wybór i kolejność kolumn")
        self.setMinimumWidth(350)
        self.setMinimumHeight(450)

        self.available_columns = available_columns or []
        self.visible_columns = visible_columns or []
        self.default_columns = default_columns or []
        self.column_map = {col_id: (name, width) for col_id, name, width in self.available_columns}

        self.user_role = user_role

        # Przekazujemy stan checkboxa bezpośrednio do metody budującej UI
        self.setup_ui(is_comment_column_checked)
        self.apply_dialog_theme()

    def apply_dialog_theme(self):
        actual_theme = "dark"
        if self.parent_widget and hasattr(self.parent_widget, 'is_dark_theme'):
            actual_theme = "dark" if self.parent_widget.is_dark_theme else "light"

        self.setStyleSheet(AppStyles.get_dialog_style(actual_theme))

        # --- NOWY KOD DO STYLIZACJI PÓL WYBORU ---
        # Definiujemy kolory w zależności od motywu
        if actual_theme == "dark":
            unchecked_bg = AppStyles.DARK_BACKGROUND_MAIN
            unchecked_border = AppStyles.DARK_BORDER_PRIMARY
            accent_color = AppStyles.ACCENT_COLOR_DARK
            accent_hover = AppStyles.ACCENT_COLOR_DARK_HOVER
        else:
            unchecked_bg = AppStyles.LIGHT_BACKGROUND_CONTROLS
            unchecked_border = AppStyles.LIGHT_BORDER_SECONDARY
            accent_color = AppStyles.ACCENT_COLOR_LIGHT
            accent_hover = AppStyles.ACCENT_COLOR_LIGHT_HOVER

        # Kompletny styl dla QListWidget z uwzględnieniem wskaźników
        list_style = f"""
            QListWidget {{
                background-color: {AppStyles.DARK_BACKGROUND_CONTROLS if actual_theme == 'dark' else AppStyles.LIGHT_BACKGROUND_CONTROLS};
                color: {AppStyles.DARK_TEXT_PRIMARY if actual_theme == 'dark' else AppStyles.LIGHT_TEXT_PRIMARY};
                border: 1px solid {AppStyles.DARK_BORDER_SECONDARY if actual_theme == 'dark' else AppStyles.LIGHT_BORDER_PRIMARY};
                border-radius: {AppStyles.BORDER_RADIUS};
            }}
            QListWidget::item:selected {{
                background-color: {AppStyles.DARK_BACKGROUND_HOVER if actual_theme == 'dark' else AppStyles.LIGHT_BACKGROUND_HOVER};
                border: 1px solid {accent_color};
                border-radius: 2px;
            }}
            QListWidget::indicator {{
                width: 13px;
                height: 13px;
                border-radius: 3px;
            }}
            QListWidget::indicator:unchecked {{
                background-color: {unchecked_bg};
                border: 1px solid {unchecked_border};
            }}
            QListWidget::indicator:unchecked:hover {{
                border: 1px solid {accent_color};
            }}
            QListWidget::indicator:checked {{
                background-color: {accent_color};
                border: 1px solid {accent_hover};
                image: none;
            }}
        """
        self.columns_list.setStyleSheet(list_style)
        # --- KONIEC NOWEGO KODU ---

        button_style = AppStyles.get_button_style(actual_theme)
        self.move_up_button.setStyleSheet(button_style)
        self.move_down_button.setStyleSheet(button_style)
        self.restore_default_button.setStyleSheet(button_style)
        self.ok_button.setStyleSheet(button_style)
        self.cancel_button.setStyleSheet(button_style)
        self.komentarz_checkbox.setStyleSheet(AppStyles.get_checkbox_style(actual_theme))

    def setup_ui(self, is_comment_checked):
        main_layout = QVBoxLayout(self)
        instruction_label = QLabel("Wybierz i uporządkuj kolumny, które mają być widoczne:")
        main_layout.addWidget(instruction_label)

        columns_layout = QHBoxLayout()
        self.columns_list = QListWidget()
        self.columns_list.setSelectionMode(QAbstractItemView.SingleSelection)
        self.columns_list.setDragDropMode(QAbstractItemView.InternalMove)

        order_buttons_layout = QVBoxLayout()
        self.move_up_button = QPushButton("▲ Wyżej")
        self.move_down_button = QPushButton("▼ Niżej")
        self.move_up_button.clicked.connect(self.move_item_up)
        self.move_down_button.clicked.connect(self.move_item_down)
        order_buttons_layout.addWidget(self.move_up_button)
        order_buttons_layout.addWidget(self.move_down_button)
        order_buttons_layout.addStretch()

        columns_layout.addWidget(self.columns_list)
        columns_layout.addLayout(order_buttons_layout)
        main_layout.addLayout(columns_layout)

        separator = QFrame()
        separator.setFrameShape(QFrame.HLine)
        separator.setFrameShadow(QFrame.Sunken)
        main_layout.addWidget(separator)

        self.komentarz_checkbox = QCheckBox("Pokaż kolumnę 'Komentarz do Grafiku'")
        self.komentarz_checkbox.setChecked(is_comment_checked)
        self.komentarz_checkbox.setVisible(self.user_role == "Pracownik WPR")
        main_layout.addWidget(self.komentarz_checkbox)

        buttons_layout = QHBoxLayout()
        self.restore_default_button = QPushButton("Przywróć domyślne")
        self.ok_button = QPushButton("OK")
        self.cancel_button = QPushButton("Anuluj")
        self.restore_default_button.clicked.connect(self.restore_default_columns)
        self.ok_button.clicked.connect(self.accept)
        self.cancel_button.clicked.connect(self.reject)

        buttons_layout.addWidget(self.restore_default_button)
        buttons_layout.addStretch()
        buttons_layout.addWidget(self.ok_button)
        buttons_layout.addWidget(self.cancel_button)
        main_layout.addLayout(buttons_layout)

        self.populate_columns_list()
        self.columns_list.itemSelectionChanged.connect(self.update_button_states)
        self.update_button_states()

    def populate_columns_list(self):
        self.columns_list.clear()
        for col_id in self.visible_columns:
            if col_id in self.column_map:
                name, _ = self.column_map[col_id]
                item = QListWidgetItem(name)
                item.setData(Qt.UserRole, col_id)
                item.setFlags(item.flags() | Qt.ItemIsUserCheckable)
                item.setCheckState(Qt.Checked)
                self.columns_list.addItem(item)

        visible_ids = set(self.visible_columns)
        for col_id, name, _ in self.available_columns:
            if col_id == 'komentarz_grafik':
                continue
            if col_id not in visible_ids:
                item = QListWidgetItem(name)
                item.setData(Qt.UserRole, col_id)
                item.setFlags(item.flags() | Qt.ItemIsUserCheckable)
                item.setCheckState(Qt.Unchecked)
                self.columns_list.addItem(item)

    def update_button_states(self):
        current_row = self.columns_list.currentRow()
        item_count = self.columns_list.count()
        self.move_up_button.setEnabled(current_row > 0)
        self.move_down_button.setEnabled(current_row >= 0 and current_row < item_count - 1)

    def move_item_up(self):
        current_row = self.columns_list.currentRow()
        if current_row > 0:
            current_item = self.columns_list.takeItem(current_row)
            self.columns_list.insertItem(current_row - 1, current_item)
            self.columns_list.setCurrentRow(current_row - 1)

    def move_item_down(self):
        current_row = self.columns_list.currentRow()
        if current_row >= 0 and current_row < self.columns_list.count() - 1:
            current_item = self.columns_list.takeItem(current_row)
            self.columns_list.insertItem(current_row + 1, current_item)
            self.columns_list.setCurrentRow(current_row + 1)

    def restore_default_columns(self):
        self.visible_columns = self.default_columns.copy()
        self.populate_columns_list()

    def get_selected_columns(self):
        selected_columns = []
        for i in range(self.columns_list.count()):
            item = self.columns_list.item(i)
            if item.checkState() == Qt.Checked:
                col_id = item.data(Qt.UserRole)
                selected_columns.append(col_id)
        return selected_columns

    # ZMIENIONA NAZWA METODY
    def get_comment_column_state(self):
        """Zwraca stan zaznaczenia checkboxa komentarza."""
        return self.komentarz_checkbox.isChecked()
