# -*- coding: utf-8 -*-

import datetime
from PySide6.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QLabel,
                               QPushButton, QGroupBox, QFrame, QGridLayout, QMessageBox, QListWidget, QAbstractItemView,
                               QDateEdit, QDateTimeEdit)
from PySide6.QtCore import Qt, Signal, QDate, QDateTime
from styles import AppStyles
from db_connector import DatabaseConnector, get_modifier_id
from ui_utils import show_confirmation_dialog
from config import SQL_OBJECTS
from debug_utils import log_error


# --- NOWA KLASA: Dialog do wyboru daty blokady ---
class BlockingDateDialog(QDialog):
    def __init__(self, parent=None, current_date=None):
        super().__init__(parent)
        self.setWindowTitle("Ustaw datę blokady")
        self.is_dark_theme = getattr(parent, 'is_dark_theme', False)

        layout = QVBoxLayout(self)
        layout.addWidget(QLabel("Wybierz datę, do której plany urlopowe mają być zablokowane:"))

        self.date_edit = QDateEdit(current_date or QDate.currentDate())
        self.date_edit.setCalendarPopup(True)
        self.date_edit.setDisplayFormat("yyyy-MM-dd")
        layout.addWidget(self.date_edit)

        buttons_layout = QHBoxLayout()
        self.ok_button = QPushButton("OK")
        self.cancel_button = QPushButton("Anuluj")
        buttons_layout.addStretch()
        buttons_layout.addWidget(self.cancel_button)
        buttons_layout.addWidget(self.ok_button)

        self.ok_button.clicked.connect(self.accept)
        self.cancel_button.clicked.connect(self.reject)

        layout.addLayout(buttons_layout)
        self.apply_styles()

    def get_selected_date(self):
        return self.date_edit.date()

    def apply_styles(self):
        theme = "dark" if self.is_dark_theme else "light"
        self.setStyleSheet(AppStyles.get_dialog_style(theme))
        self.date_edit.setStyleSheet(AppStyles.get_date_edit_style(theme))
        self.ok_button.setStyleSheet(AppStyles.get_button_style(theme))
        self.cancel_button.setStyleSheet(AppStyles.get_button_style(theme))


# --- ZAKTUALIZOWANA KLASA GŁÓWNEGO OKNA ---
class ScheduleControlDialog(QDialog):
    data_refresh_needed = Signal()

    def __init__(self, parent, year, month):
        super().__init__(parent)
        self.parent_widget = parent
        self.year = year
        self.month = month
        self.is_dark_theme = getattr(parent, 'is_dark_theme', False)
        self.user_id, self.login_windows, _, _, _ = get_modifier_id()
        self.data_provider = parent.data_provider
        self.blocking_date = None  # Przechowuje aktualną datę blokady

        self.setWindowTitle("Sugestie i blokowanie grafiku")
        self.setMinimumWidth(450)

        self.setup_ui()
        self.connect_signals()
        self.apply_styles()
        self.load_initial_status()

    def setup_ui(self):
        main_layout = QVBoxLayout(self)
        self.status_box = QGroupBox("Aktualny status:")

        status_layout = QHBoxLayout()
        self.suggestions_status_label = QLabel("Ładowanie...")
        self.suggestions_status_label.setAlignment(Qt.AlignCenter)
        self.publish_status_label = QLabel("Ładowanie...")
        self.publish_status_label.setAlignment(Qt.AlignCenter)
        status_layout.addWidget(self.suggestions_status_label)
        status_layout.addWidget(self.publish_status_label)
        self.status_box.setLayout(status_layout)

        suggestions_box = QGroupBox("Zmiana statusu sugestii")
        suggestions_layout = QVBoxLayout()
        self.unlock_button = QPushButton("Odblokowane")
        self.lock_for_consultants_button = QPushButton("Zablokowane dla Konsultantów")
        self.lock_for_consultants_support_button = QPushButton("Zablokowane dla Konsultantów i wsparcia")
        suggestions_layout.addWidget(self.unlock_button)
        suggestions_layout.addWidget(self.lock_for_consultants_button)
        suggestions_layout.addWidget(self.lock_for_consultants_support_button)
        suggestions_box.setLayout(suggestions_layout)

        publish_box = QGroupBox("Publikacja grafiku")
        publish_layout = QVBoxLayout()
        self.publish_button = QPushButton("Publikacja grafiku")
        self.unpublish_button = QPushButton("Cofnij publikację")
        publish_layout.addWidget(self.publish_button)
        publish_layout.addWidget(self.unpublish_button)
        publish_box.setLayout(publish_layout)

        right_panel_layout = QVBoxLayout()

        blocking_box = QGroupBox("Blokowanie Planów Urlopowych (PU)")
        blocking_layout = QVBoxLayout()

        self.blocking_date_label = QLabel("Data blokady: Nie ustawiono")
        self.blocking_date_label.setStyleSheet("font-weight: bold;")

        blocking_controls_layout = QHBoxLayout()

        # ZMIANA: Użycie QDateTimeEdit zamiast QDateEdit
        self.blocking_date_edit = QDateTimeEdit(QDateTime.currentDateTime())
        self.blocking_date_edit.setCalendarPopup(True)
        self.blocking_date_edit.setDisplayFormat("yyyy-MM-dd HH:mm")  # ZMIANA formatu

        self.save_blocking_date_button = QPushButton("Ustaw datę blokady")

        blocking_controls_layout.addWidget(self.blocking_date_edit)
        blocking_controls_layout.addWidget(self.save_blocking_date_button)

        blocking_layout.addWidget(self.blocking_date_label)
        blocking_layout.addLayout(blocking_controls_layout)
        blocking_box.setLayout(blocking_layout)

        data_box = QGroupBox("Pobieranie danych")
        data_layout = QVBoxLayout()
        self.get_suggestions_button = QPushButton("Pobierz sugestie Konsultantów")
        self.get_vacation_plans_button = QPushButton("Pobierz plany urlopowe")
        data_layout.addWidget(self.get_suggestions_button)
        data_layout.addWidget(self.get_vacation_plans_button)
        data_box.setLayout(data_layout)

        right_panel_layout.addWidget(blocking_box)
        right_panel_layout.addWidget(data_box)

        grid_layout = QGridLayout()
        grid_layout.addWidget(self.status_box, 0, 0, 1, 2)
        grid_layout.addWidget(suggestions_box, 1, 0)
        grid_layout.addWidget(publish_box, 2, 0)
        grid_layout.addLayout(right_panel_layout, 1, 1, 2, 1)
        main_layout.addLayout(grid_layout)

        separator = QFrame()
        separator.setFrameShape(QFrame.HLine)
        separator.setFrameShadow(QFrame.Sunken)
        main_layout.addWidget(separator)

        close_button_layout = QHBoxLayout()
        close_button_layout.addStretch()
        self.close_button = QPushButton("Zamknij")
        close_button_layout.addWidget(self.close_button)
        main_layout.addLayout(close_button_layout)

    def connect_signals(self):
        self.close_button.clicked.connect(self.accept)
        self.unlock_button.clicked.connect(self.unlock_suggestions)
        self.lock_for_consultants_button.clicked.connect(self.lock_for_consultants)
        self.lock_for_consultants_support_button.clicked.connect(self.lock_for_support)
        self.publish_button.clicked.connect(self.publish_schedule)
        self.unpublish_button.clicked.connect(self.unpublish_schedule)
        self.get_suggestions_button.clicked.connect(self.get_suggestions)
        self.get_vacation_plans_button.clicked.connect(self.get_vacation_plans)
        # POPRAWKA: Użyto prawidłowej nazwy przycisku i metody
        self.save_blocking_date_button.clicked.connect(self._save_blocking_date)


    def apply_styles(self):
        theme = "dark" if self.is_dark_theme else "light"
        self.setStyleSheet(AppStyles.get_dialog_style(theme))
        for button in self.findChildren(QPushButton):
            button.setStyleSheet(AppStyles.get_button_style(theme))
        self.suggestions_status_label.setStyleSheet("font-weight: bold; border: 1px solid gray; padding: 5px;")
        self.publish_status_label.setStyleSheet("font-weight: bold; border: 1px solid gray; padding: 5px;")
        # ZMIANA: Styl dla nowej kontrolki
        self.blocking_date_edit.setStyleSheet(AppStyles.get_date_edit_style(theme))

    def get_vacation_plans(self):
        """Obsługuje pobieranie planów urlopowych."""
        reply = show_confirmation_dialog(self, "Potwierdzenie",
                                         "Czy na pewno chcesz pobrać plany urlopowe dla wszystkich? Może to spowodować nadpisanie wprowadzonych już danych.",
                                         default_button=QMessageBox.No)

        if reply == QMessageBox.No:
            return

        try:
            # Zakładamy, że procedura obsługuje parametr NULL dla grup (oznaczający 'wszystkie')
            sql = f"EXEC {SQL_OBJECTS['p_importujplanyurlopowe']} {self.year}, {self.month}, '{self.login_windows}', NULL"
            conn = DatabaseConnector.get_connection()
            conn.execute(sql)
            conn.commit()
            conn.close()
            QMessageBox.information(self, "Sukces", "Plany urlopowe zostały pobrane.")
            self.data_refresh_needed.emit()
        except Exception as e:
            QMessageBox.critical(self, "Błąd Bazy Danych", f"Wystąpił błąd podczas pobierania planów urlopowych:<br>{e}")

    def _execute_procedure(self, sql_query):
        """Pomocnicza metoda do wykonywania zapytań."""
        try:
            conn = DatabaseConnector.get_connection()
            cursor = conn.cursor()
            cursor.execute(sql_query)
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            QMessageBox.critical(self, "Błąd Bazy Danych", f"Wystąpił błąd:<br>{e}")
            return False

    def load_initial_status(self):
        """Wczytuje i ustawia początkowy status z bazy oraz dynamiczny tytuł."""
        try:
            # Ustawienie dynamicznego tytułu
            polish_months = [
                "styczeń", "luty", "marzec", "kwiecień", "maj", "czerwiec",
                "lipiec", "sierpień", "wrzesień", "październik", "listopad", "grudzień"
            ]
            month_name = polish_months[self.month - 1]
            self.status_box.setTitle(f"Aktualny status grafiku na {month_name} {self.year}:")

            conn = DatabaseConnector.get_connection()
            cursor = conn.cursor()

            # --- NOWA LOGIKA Z DWOMA OSOBNYMI ZAPYTANIAMI ---

            # 1. Pobranie statusu sugestii
            self.suggestions_status_label.setText("Sugestie: Nieustawiony")
            query_sug = f"SELECT Status FROM {SQL_OBJECTS['datyblokowaniasugestii']} WHERE Rok=? AND Miesiac=?"
            sug_result = cursor.execute(query_sug, (self.year, self.month)).fetchone()
            if sug_result:
                status_code = sug_result[0]
                status_map = {
                    '0': "Sugestie: Odblokowane",
                    '1': "Sugestie: Zablokowane dla Konsultantów",
                    '2': "Sugestie: Zablokowane dla Konsultantów i Wsparcia"
                }
                self.suggestions_status_label.setText(status_map.get(status_code, "Sugestie: Nieznany status"))

            # 2. Osobne pobranie daty blokady Planów Urlopowych (PU)
            self.blocking_date_label.setText("Data blokady: Nie ustawiono")
            self.blocking_date = None

            # Użycie datetime.date, aby upewnić się, że format jest poprawny dla bazy
            first_day_of_month = datetime.date(self.year, self.month, 1)
            query_block = f"SELECT DataBlokowania FROM {SQL_OBJECTS['datyblokowaniapu']} WHERE ZablokowanaData = ?"
            block_date_row = cursor.execute(query_block, (first_day_of_month,)).fetchone()

            if block_date_row and block_date_row[0]:
                blocking_date = block_date_row[0]
                # Sprawdzamy, czy zwrócona data jest prawidłowym obiektem datetime
                if isinstance(blocking_date, datetime.datetime):
                    self.blocking_date = blocking_date
                    self.blocking_date_label.setText(f"Data blokady: {blocking_date.strftime('%Y-%m-%d %H:%M')}")
                    self.blocking_date_edit.setDateTime(QDateTime(blocking_date))

            # 3. Pobranie statusu publikacji (bez zmian)
            query_pub = f"SELECT TOP 1 Id FROM {SQL_OBJECTS['datypublikacjigrafiku']} WHERE Status=1 AND Rok=? AND Miesiac=?"
            pub_status = cursor.execute(query_pub, (self.year, self.month)).fetchone()
            self.publish_status_label.setText("Grafik: Opublikowany" if pub_status else "Grafik: Nieopublikowany")

            conn.close()
        except Exception as e:
            self.suggestions_status_label.setText("Sugestie: Błąd odczytu")
            self.publish_status_label.setText("Grafik: Błąd odczytu")
            self.blocking_date_label.setText("Data blokady: Błąd odczytu")
            log_error(f"Nie udało się wczytać statusów: {e}", exception=e)
            QMessageBox.warning(self, "Błąd", f"Nie udało się wczytać statusów: {e}")

    def _save_blocking_date(self):
        """Zapisuje lub aktualizuje datę blokady PU, używając nowej, zunifikowanej procedury."""
        selected_date = self.blocking_date_edit.date().toString("yyyy-MM-dd")
        reply = QMessageBox.question(self, "Potwierdzenie",
                                     f"Czy na pewno chcesz ustawić datę blokady planów urlopowych na {selected_date}?",
                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.No:
            return

        try:
            conn = DatabaseConnector.get_connection()
            cursor = conn.cursor()
            sql = f"EXEC {SQL_OBJECTS['p_blokowaniesugestii']} ?, ?, ?, ?, ?, ?"
            # Parametry: @Rok, @Miesiac, @Data, @Nr_Kadrowy, @Status, @parametr
            # Dla @Status przekazujemy NULL, bo nie jest używany przy @parametr=2
            cursor.execute(sql, (self.year, self.month, selected_date, self.user_app_id, None, 2))
            conn.commit()
            conn.close()

            QMessageBox.information(self, "Sukces", "Data blokady planów urlopowych została zaktualizowana.")
            self.load_initial_status()

        except Exception as e:
            log_error(f"Błąd zapisu daty blokady PU: {e}", exception=e)
            QMessageBox.critical(self, "Błąd Bazy Danych", f"Wystąpił błąd podczas zapisu daty blokady:<br>{e}")

    def _save_blocking_date(self):
        """Zapisuje lub aktualizuje datę i czas blokady PU w bazie danych."""
        # ZMIANA: Usunięcie sekund z formatu zapisu
        selected_datetime = self.blocking_date_edit.dateTime().toString("yyyy-MM-dd HH:mm")

        reply = QMessageBox.question(self, "Potwierdzenie",
                                     f"Czy na pewno chcesz ustawić datę i czas blokady planów urlopowych na {selected_datetime}?",
                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.No:
            return

        try:
            conn = DatabaseConnector.get_connection()
            cursor = conn.cursor()
            sql = f"EXEC {SQL_OBJECTS['p_blokowaniesugestii']} ?, ?, ?, ?, ?, ?"
            # Parametry: @Rok, @Miesiac, @Data, @Nr_Kadrowy, @Status, @parametr
            # Dla @Status przekazujemy NULL, bo nie jest używany przy @parametr=2
            cursor.execute(sql, (self.year, self.month, selected_datetime, self.login_windows, None, 2))
            conn.commit()
            conn.close()

            QMessageBox.information(self, "Sukces", "Data blokady planów urlopowych została zaktualizowana.")
            self.load_initial_status()

        except Exception as e:
            log_error(f"Błąd zapisu daty blokady PU: {e}", exception=e)
            QMessageBox.critical(self, "Błąd Bazy Danych", f"Wystąpił błąd podczas zapisu daty blokady:<br>{e}")

    def unlock_suggestions(self):
        self._set_suggestions_status(0)

    def lock_for_consultants(self):
        self._set_suggestions_status(1)

    def lock_for_support(self):
        self._set_suggestions_status(2)

    def _set_suggestions_status(self, status_code: int):
        """
        Zmienia status blokady sugestii w bazie danych, wywołując procedurę składowaną.

        Args:
            status_code (int): Kod statusu do ustawienia (0, 1, lub 2).
        """
        status_map = {
            0: "Odblokowane",
            1: "Zablokowane dla Konsultantów",
            2: "Zablokowane dla Konsultantów i wsparcia"
        }
        status_name = status_map.get(status_code, "Nieznany")

        reply = show_confirmation_dialog(
            self, "Potwierdzenie zmiany statusu",
            f"Czy na pewno chcesz zmienić status sugestii na:<br><b>{status_name}</b>?",
            default_button=QMessageBox.No
        )

        if reply == QMessageBox.StandardButton.No:
            return

        try:
            conn = DatabaseConnector.get_connection()
            cursor = conn.cursor()
            sql = f"EXEC {SQL_OBJECTS['p_blokowaniesugestii']} ?, ?, ?, ?, ?, ?"

            # Parametry: @Rok, @Miesiac, @Data, @Nr_Kadrowy, @Status, @parametr
            # Dla zmiany statusu sugestii @parametr = 1
            # @Nr_Kadrowy przechowuje login Windows osoby modyfikującej
            # @Data jest wypełniana bieżącą datą i godziną
            cursor.execute(sql, (self.year, self.month, datetime.datetime.now(), self.login_windows, status_code, 1))
            conn.commit()
            conn.close()

            QMessageBox.information(self, "Sukces", f"Status sugestii został pomyślnie zmieniony.")
            self.load_initial_status()  # Odświeża etykiety statusu w oknie dialogowym

        except Exception as e:
            log_error(f"Błąd podczas zmiany statusu sugestii na {status_code}: {e}", exception=e)
            QMessageBox.critical(self, "Błąd Bazy Danych", f"Wystąpił błąd podczas zmiany statusu sugestii:\<br>{e}")

    def publish_schedule(self):
        sql = f"exec {SQL_OBJECTS['p_publikowaniegrafiku']} {self.year}, {self.month}, '{self.login_windows}', 1"
        if self._execute_procedure(sql):
            QMessageBox.information(self, "Sukces", "Grafik został opublikowany.")
            self.load_initial_status()
            # --- POCZĄTEK ZMIANY ---
            self.data_provider.clear_publish_status_cache(self.year, self.month)
            # --- KONIEC ZMIANY ---
            self.data_refresh_needed.emit()

    def unpublish_schedule(self):
        sql = f"exec {SQL_OBJECTS['p_publikowaniegrafiku']} {self.year}, {self.month}, '{self.login_windows}', 0"
        if self._execute_procedure(sql):
            QMessageBox.information(self, "Sukces", "Publikacja grafiku została cofnięta.")
            self.load_initial_status()
            # --- POCZĄTEK ZMIANY ---
            self.data_provider.clear_publish_status_cache(self.year, self.month)
            # --- KONIEC ZMIANY ---
            self.data_refresh_needed.emit()

    def get_suggestions(self):
        # Wersja dla Pythona nie pobiera danych do Excela, tylko wywołuje procedurę
        # i emituje sygnał do odświeżenia głównego okna.
        sql = f"exec {SQL_OBJECTS['p_pobierzsugestieii']} {self.year}, {self.month}, {self.month}, {self.year}, 1, 0"
        if self._execute_procedure(sql):
             QMessageBox.information(self, "Sukces", "Procedura pobierania sugestii została uruchomiona.<br>Dane zostaną odświeżone.")
             self.data_refresh_needed.emit()


class SuggestionsOutDialog(QDialog):
    """Dialog do pobierania sugestii i planów dla Lidera OUT."""
    data_refresh_needed = Signal()

    def __init__(self, parent, year, month):
        super().__init__(parent)
        self.parent_widget = parent
        self.year = year
        self.month = month
        self.is_dark_theme = getattr(parent, 'is_dark_theme', False)
        _, self.user_app_id, _, _ = get_modifier_id()

        self.setWindowTitle("Sugestie konsultantów out")
        self.setMinimumSize(350, 400)

        self.setup_ui()
        self.connect_signals()
        self.apply_styles()
        self._load_groups()

    def setup_ui(self):
        layout = QVBoxLayout(self)

        data_box = QGroupBox("Pobieranie danych")
        data_layout = QVBoxLayout()
        self.get_suggestions_button = QPushButton("Pobierz sugestie Konsultantów")
        self.get_vacation_plans_button = QPushButton("Pobierz plany urlopowe")
        data_layout.addWidget(self.get_suggestions_button)
        data_layout.addWidget(self.get_vacation_plans_button)
        data_box.setLayout(data_layout)

        groups_box = QGroupBox("Wybierz grupy do pobrania:")
        groups_layout = QVBoxLayout()
        self.groups_list = QListWidget()
        self.groups_list.setSelectionMode(QAbstractItemView.ExtendedSelection)
        groups_layout.addWidget(self.groups_list)
        groups_box.setLayout(groups_layout)

        layout.addWidget(data_box)
        layout.addWidget(groups_box)

        self.close_button = QPushButton("Zamknij")
        close_button_layout = QHBoxLayout()
        close_button_layout.addStretch()
        close_button_layout.addWidget(self.close_button)
        layout.addLayout(close_button_layout)

    def connect_signals(self):
        self.close_button.clicked.connect(self.accept)
        self.get_suggestions_button.clicked.connect(self._get_consultant_suggestions)
        self.get_vacation_plans_button.clicked.connect(self._get_vacation_plans)

    def apply_styles(self):
        theme = "dark" if self.is_dark_theme else "light"
        self.setStyleSheet(AppStyles.get_dialog_style(theme))
        for button in self.findChildren(QPushButton):
            button.setStyleSheet(AppStyles.get_button_style(theme))
        self.groups_list.setStyleSheet(AppStyles.get_list_style(theme))

    def _get_selected_groups_str(self):
        """Zwraca string z wybranymi grupami, gotowy do użycia w SQL."""
        selected_items = [item.text() for item in self.groups_list.selectedItems()]
        if not selected_items:
            QMessageBox.warning(self, "Brak zaznaczenia", "Proszę wybrać co najmniej jedną grupę z listy.")
            return None
        # Tworzy string w formacie "'Grupa1','Grupa2',..."
        return ",".join([f"'{item}'" for item in selected_items])

    def _load_groups(self):
        """Ładuje listę grup (przełożonych) na podstawie logiki VBA."""
        self.groups_list.clear()
        query = f"""
            SELECT distinct PrzelozonyDane 
            FROM {SQL_OBJECTS['konfiguracjazatrudnienie']}
            """

            # FROM dbo.v_DO_KonfiguracjaZatrudnienie
            # WHERE (Status = 'Aktywny' Or DataZwolnienia > '{self.year}-{self.month}-28') 
            #   AND flag=1 AND NieobecnoscDlugoterminowa=0 AND rola in (1,2,3) 
            #   AND Jednostka=4 AND flag=1 AND NieobecnoscDlugoterminowa=0 
            #   AND rola in (select rola from v_DO_KonfiguracjaZatrudnienie where DataZatrudnienia<'{self.year}-{self.month}-01' and DataZwolnienia>'{self.year}-{self.month}-01' and Jednostka=4) 
            # ORDER BY PrzelozonyDane

        try:
            conn = DatabaseConnector.get_connection()
            cursor = conn.cursor()
            results = cursor.execute(query).fetchall()
            conn.close()
            for row in results:
                self.groups_list.addItem(row[0])
        except Exception as e:
            QMessageBox.critical(self, "Błąd Bazy Danych", f"Nie udało się wczytać listy grup:<br>{e}")

    def _get_consultant_suggestions(self):
        """Adaptacja logiki VBA dla przycisku 'Pobierz sugestie Konsultantów'."""
        selected_groups_str = self._get_selected_groups_str()
        if not selected_groups_str: return

        reply = show_confirmation_dialog(self, "Potwierdzenie",
                                         "Czy na pewno chcesz pobrać sugestie? Może to spowodować nadpisanie wprowadzonych już danych.",
                                         default_button=QMessageBox.No)

        if reply == QMessageBox.No:
            return

        try:
            sql = f"EXEC {SQL_OBJECTS['p_pobieraniesugestiiout']} {self.year}, {self.month}, '{self.user_app_id}', {selected_groups_str}"
            conn = DatabaseConnector.get_connection()
            conn.execute(sql)
            conn.commit()
            conn.close()
            QMessageBox.information(self, "Sukces", "Sugestie Konsultantów zostały pobrane do grafiku.")
            self.data_refresh_needed.emit()
        except Exception as e:
            QMessageBox.critical(self, "Błąd Bazy Danych", f"Wystąpił błąd podczas pobierania sugestii:<br>{e}")

    def _get_vacation_plans(self):
        """Adaptacja logiki VBA dla przycisku 'Pobierz plany urlopowe'."""
        # UWAGA: Poniższa logika jest bardzo złożona i silnie uzależniona od struktury Excela.
        # W aplikacji Python najlepszą praktyką byłoby przeniesienie tej logiki
        # do DEDYKOWANEJ PROCEDURY SKŁADOWANEJ w SQL Server.
        # Poniższy kod jest uproszczoną adaptacją, która tylko wywołuje taką procedurę.
        selected_groups_str = self._get_selected_groups_str()
        if not selected_groups_str:
            return

        reply = show_confirmation_dialog(self, "Potwierdzenie",
                                         "Czy na pewno chcesz pobrać plany urlopowe? Może to spowodować nadpisanie wprowadzonych już danych.",
                                         default_button=QMessageBox.No)

        if reply == QMessageBox.No:
            return

        try:
            # Zakładamy, że istnieje procedura, która hermetyzuje logikę z pętli VBA
            sql = f"EXEC {SQL_OBJECTS['p_importujplanyurlopowe']} {self.year}, {self.month}, '{self.user_app_id}', {selected_groups_str}"
            conn = DatabaseConnector.get_connection()
            conn.execute(sql)
            conn.commit()
            conn.close()
            QMessageBox.information(self, "Sukces", "Plany urlopowe zostały pobrane.")
            self.data_refresh_needed.emit()
        except Exception as e:
            QMessageBox.critical(self, "Błąd Bazy Danych", f"Wystąpił błąd podczas pobierania planów urlopowych:<br>{e}")
