# Plik: debug_utils.py

import datetime
import traceback
import sys
from pathlib import Path
import os


# --- NOWA FUNKCJA DO WYSZUKIWANIA FOLDERU POBRANE ---
def _get_downloads_path():
    """
    Znajduje ścieżkę do folderu Pobrane użytkownika, działając niezależnie
    od wersji językowej systemu Windows. W przypadku innych systemów (Linux, macOS)
    używa domyślnej ścieżki.
    """
    if sys.platform == "win32":
        try:
            import winreg
            key = winreg.OpenKey(winreg.HKEY_CURRENT_USER,
                                 r'Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders')
            # GUID dla folderu Downloads jest stały
            downloads_guid = '{374DE290-123F-4565-9164-39C4925E467B}'
            path, _ = winreg.QueryValueEx(key, downloads_guid)
            winreg.CloseKey(key)
            # Rozwijamy zmienne środowiskowe, takie jak %USERPROFILE%
            return Path(os.path.expandvars(path))
        except Exception:
            # W razie błędu odczytu rejestru, wracamy do standardowej nazwy
            return Path.home() / "Downloads"
    else:
        # Dla systemów innych niż Windows (Linux, macOS)
        return Path.home() / "Downloads"


# --- KONIEC NOWEJ FUNKCJI ---


# Globalne zmienne, które będą konfigurowane przez setup_logging
LOG_TO_FILE = False
LOG_TO_CONSOLE = True
LOG_FILE_PATH = None
MAX_LOG_FILE_SIZE = 10 * 1024 * 1024
MAX_LOG_FILES = 5

_log_file_handle = None
_in_debug_print = False


def setup_logging(log_to_file=False, log_to_console=False):
    """
    Konfiguruje system logowania na podstawie ustawień z bazy danych.
    """
    global LOG_TO_FILE, LOG_TO_CONSOLE, LOG_FILE_PATH

    LOG_TO_FILE = log_to_file
    LOG_TO_CONSOLE = log_to_console

    if LOG_TO_FILE:
        try:
            # --- ZMIANA: Użycie nowej funkcji do znalezienia ścieżki ---
            downloads_dir = _get_downloads_path()

            app_logs_dir = downloads_dir / "TeamFlowAppLogs"
            app_logs_dir.mkdir(exist_ok=True)

            today = datetime.datetime.now().strftime("%Y-%m-%d")
            LOG_FILE_PATH = app_logs_dir / f"teamflow_{today}.log"

            _init_log_file()
            debug_print(f"Logowanie do pliku skonfigurowane w: {LOG_FILE_PATH}")

        except Exception as e:
            print(f"KRYTYCZNY BŁĄD: Nie można skonfigurować logowania do pliku: {e}", file=sys.stderr)
            LOG_TO_FILE = False


def _init_log_file():
    """Inicjalizuje lub otwiera plik logów."""
    global _log_file_handle
    if not LOG_FILE_PATH: return

    try:
        if LOG_FILE_PATH.exists() and LOG_FILE_PATH.stat().st_size > MAX_LOG_FILE_SIZE:
            _rotate_log_files()

        _log_file_handle = open(LOG_FILE_PATH, 'a', encoding='utf-8')

        session_start = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        _log_file_handle.write(f"\n{'=' * 50}\nNOWA SESJA: {session_start}\n{'=' * 50}\n")
        _log_file_handle.flush()

    except Exception as e:
        print(f"Błąd podczas inicjalizacji pliku logów: {e}", file=sys.stderr)
        global LOG_TO_FILE
        LOG_TO_FILE = False


def _rotate_log_files():
    """Rotuje pliki logów, gdy osiągną maksymalny rozmiar."""
    global _log_file_handle
    try:
        if _log_file_handle:
            _log_file_handle.close()
            _log_file_handle = None

        for i in range(MAX_LOG_FILES - 1, 0, -1):
            old_file = Path(str(LOG_FILE_PATH) + f".{i}")
            new_file = Path(str(LOG_FILE_PATH) + f".{i + 1}")
            if old_file.exists():
                if new_file.exists():
                    new_file.unlink()
                old_file.rename(new_file)

        if LOG_FILE_PATH.exists():
            LOG_FILE_PATH.rename(Path(str(LOG_FILE_PATH) + ".1"))

    except Exception as e:
        print(f"Błąd podczas rotacji plików logów: {e}", file=sys.stderr)


def _write_to_file(message):
    """Zapisuje wiadomość do pliku logów."""
    global _log_file_handle
    if not LOG_TO_FILE or not _log_file_handle: return
    try:
        _log_file_handle.write(message + "\n")
        _log_file_handle.flush()
        if _log_file_handle.tell() > MAX_LOG_FILE_SIZE:
            _init_log_file()
    except Exception as e:
        print(f"Błąd podczas zapisu do pliku logów: {e}", file=sys.stderr)


def debug_print(*args, **kwargs):
    """Wyświetla komunikaty debugowania."""
    global _in_debug_print
    if _in_debug_print: return

    try:
        _in_debug_print = True
        current_time = datetime.datetime.now().strftime("%H:%M:%S")
        message = " ".join(map(str, args))

        if LOG_TO_CONSOLE:
            print(f"[{current_time}][DEBUG] {message}", **kwargs)

        if LOG_TO_FILE:
            current_datetime = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            _write_to_file(f"[{current_datetime}][DEBUG] {message}")

    finally:
        _in_debug_print = False


def log_error(message, exception=None):
    """Loguje błąd."""
    try:
        current_datetime = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        full_message = f"[{current_datetime}][ERROR] {message}"

        if LOG_TO_CONSOLE: print(full_message, file=sys.stderr)
        if LOG_TO_FILE: _write_to_file(full_message)

        if exception:
            tb_str = traceback.format_exc()
            if LOG_TO_CONSOLE: print(tb_str, file=sys.stderr)
            if LOG_TO_FILE: _write_to_file(tb_str)

    except Exception as e:
        print(f"[BŁĄD KRYTYCZNY W LOGERZE]: {e}", file=sys.stderr)


def log_warning(message):
    """Loguje ostrzeżenie."""
    try:
        current_datetime = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        full_message = f"[{current_datetime}][WARNING] {message}"
        if LOG_TO_CONSOLE: print(full_message)
        if LOG_TO_FILE: _write_to_file(full_message)
    except Exception as e:
        print(f"[BŁĄD KRYTYCZNY W LOGERZE]: {e}", file=sys.stderr)


def close_log_file():
    """Zamyka plik logów."""
    global _log_file_handle
    if _log_file_handle:
        try:
            _log_file_handle.close()
        except:
            pass
        finally:
            _log_file_handle = None
